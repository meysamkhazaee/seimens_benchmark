        -:    0:Source:print_tokens2.c
        -:    0:Graph:print_tokens2.gcno
        -:    0:Data:print_tokens2.gcda
        -:    0:Runs:4115
        -:    1: 
        -:    2:#include <stdio.h>
        -:    3:#include <ctype.h>
        -:    4:#include <string.h>
        -:    5:#include "tokens.h"
        -:    6:#define TRUE 1
        -:    7:#define FALSE 0
        -:    8:
     4115:    9:main(argc,argv)
        -:   10:int argc;
        -:   11:char *argv[3];
        -:   12:{  
        -:   13:  char *fname;
        -:   14:  token tok;
        -:   15:  token_stream tp;
     4115:   16:  if(argc==1)                  /* if not given filename,take as '""' */
        -:   17:  {
     2955:   18:    fname= (char *) malloc(sizeof(char));
     2955:   19:    *fname = '\0';
        -:   20:  }
     1160:   21:  else if(argc==2)
        -:   22:  {
     1130:   23:    fname= argv[1];
        -:   24:  }
        -:   25:  else
        -:   26:  { 
       30:   27:    fprintf(stdout, "Error!,please give the token stream\n");
       30:   28:    exit(0);
        -:   29:  }
     4085:   30:  tp=open_token_stream(fname);  /* open token stream */
     4055:   31:  tok=get_token(tp);
    24059:   32:  while(is_eof_token(tok) ==FALSE) /* take one token each time until eof */
        -:   33:  {
    20004:   34:    print_token(tok);
    20004:   35:    tok=get_token(tp);
        -:   36:  }
     4055:   37:  print_token(tok); /* print eof signal */
     4055:   38:  exit(0);
        -:   39:}
        -:   40:
     4085:   41:character_stream open_character_stream(fname)
        -:   42:char *fname;
        -:   43:{ 
        -:   44:  character_stream fp;
     4085:   45:  if(fname == NULL)
        -:   46:  {
     2955:   47:    fp=stdin;
        -:   48:  }
     1130:   49:  else if ((fp=fopen(fname,"r"))== NULL)
        -:   50:  {
       30:   51:    fprintf(stdout, "The file %s doesn't exists\n",fname);
       30:   52:    exit(0);
        -:   53:  }
     4055:   54:  return(fp);
        -:   55:}
        -:   56:
   158470:   57:char get_char(fp)
        -:   58:character_stream fp;
        -:   59:{ 
        -:   60:  char ch;
   158470:   61:  ch=getc(fp);
   158470:   62:  return(ch);
        -:   63:}
        -:   64:
     3484:   65:char unget_char(ch,fp)
        -:   66:character_stream fp;
        -:   67:char ch;
        -:   68:{ 
        -:   69:  char c;
     3484:   70:  c=ungetc(ch,fp);
     3484:   71:  if(c ==EOF)
        -:   72:  {
      747:   73:    return(c);
        -:   74:  }
        -:   75:  else
        -:   76:  {
     2737:   77:    return(c);
        -:   78:  }
        -:   79:}
        -:   80:
        -:   81:char buffer[81];
        -:   82:static int is_spec_symbol();
        -:   83:static int is_token_end();
        -:   84:static unget_error();
        -:   85:static int is_keyword();
        -:   86:static int is_identifier();
        -:   87:static int is_num_constant();
        -:   88:static int is_char_constant();
        -:   89:static int is_str_constant();
        -:   90:static int is_comment();
        -:   91:static void print_spec_symbol();
        -:   92:
     4085:   93:token_stream open_token_stream(fname)
        -:   94:char *fname;
        -:   95:{
        -:   96:  token_stream fp;
     4085:   97:  if(strcmp(fname,"")==0)
        -:   98:  {
     2955:   99:    fp=open_character_stream(NULL);
        -:  100:  }
        -:  101:  else
        -:  102:  {
     1130:  103:    fp=open_character_stream(fname);
        -:  104:  }
     4055:  105:  return(fp);
        -:  106:}
        -:  107:
    24059:  108:token get_token(tp)
        -:  109:token_stream tp;
        -:  110:{ 
    24059:  111:  int i=0,j;
    24059:  112:  int id=0;
        -:  113:  char ch,ch1[2];
  1972838:  114:  for (j=0;j<=80;j++)          /* initial the buffer   */
        -:  115:  { 
  1948779:  116:    buffer[j]='\0';
        -:  117:  } 
    24059:  118:  ch1[0]='\0';
    24059:  119:  ch1[1]='\0';
    24059:  120:  ch=get_char(tp);
    55911:  121:  while(ch==' '||ch=='\n')      /* strip all blanks until meet characters */
        -:  122:  {
    31852:  123:    ch=get_char(tp);
        -:  124:  } 
    24059:  125:  buffer[i]=ch;
    24059:  126:  if(is_eof_token(buffer)==TRUE)
        -:  127:  {
     4055:  128:    return(buffer);
        -:  129:  }
    20004:  130:  if(is_spec_symbol(buffer)==TRUE)
        -:  131:  {
     5236:  132:    return(buffer); 
        -:  133:  }
    14768:  134:  if(ch =='"')
        -:  135:  {
     1595:  136:    id=1;    /* prepare for string */
        -:  137:  }
    14768:  138:  if(ch ==59)
        -:  139:  {
     1660:  140:    id=2;    /* prepare for comment */
        -:  141:  }
    14768:  142:  ch=get_char(tp);
        -:  143:
   102559:  144:  while(is_token_end(id,ch) == FALSE)/* until meet the end character */
        -:  145:  {
    87791:  146:    i++;
    87791:  147:    buffer[i]=ch;
    87791:  148:    ch=get_char(tp);
        -:  149:  }
    14768:  150:  ch1[0]=ch;                        /* hold the end charcater          */
    14768:  151:  if(is_eof_token(ch1)==TRUE)       /* if end character is eof token    */
        -:  152:  { 
      747:  153:    ch=unget_char(ch,tp);        /* then put back eof on token_stream */
      747:  154:    if(ch==EOF)
        -:  155:    {
      747:  156:      unget_error(tp);
        -:  157:    }
      747:  158:    return(buffer);
        -:  159:  }
    14021:  160:  if(is_spec_symbol(ch1)==TRUE)     /* if end character is special_symbol */
        -:  161:  { 
     2737:  162:    ch=unget_char(ch,tp);        /* then put back this character       */
     2737:  163:    if(ch==EOF)
        -:  164:    {
    #####:  165:      unget_error(tp);
        -:  166:    }
     2737:  167:    return(buffer);
        -:  168:  }
    11284:  169:  if(id==1)                  /* if end character is " and is string */
        -:  170:  { 
     1559:  171:    i++;                     /* case,hold the second " in buffer    */
     1559:  172:    buffer[i]=ch;
     1559:  173:    return(buffer); 
        -:  174:  }
     9725:  175:  return(buffer);                   /* return nomal case token             */
        -:  176:}
        -:  177:
   102559:  178:static int is_token_end(str_com_id,ch)
        -:  179:char ch;
        -:  180:int str_com_id;
        -:  181:{ 
        -:  182:  char ch1[2];  /* fixed array declaration MONI */
   102559:  183:  ch1[0]=ch;
   102559:  184:  ch1[1]='\0';
   102559:  185:  if(is_eof_token(ch1)==TRUE)
        -:  186:  {
      747:  187:    return(TRUE); /* is eof token? */
        -:  188:  }
        -:  189:  
   101812:  190:  if(str_com_id==1)          /* is string token */
        -:  191:  { 
    21921:  192:    if(ch=='"' | ch=='\n')   /* for string until meet another " */
        -:  193:    {
     1559:  194:      return(TRUE);
        -:  195:    }
        -:  196:    else
        -:  197:    {
    20362:  198:      return(FALSE);
        -:  199:    } 
        -:  200:  }
        -:  201:
    79891:  202:  if(str_com_id==2)    /* is comment token */
        -:  203:  { 
    12222:  204:    if(ch=='\n')     /* for comment until meet end of line */
        -:  205:    {
     1654:  206:      return(TRUE);
        -:  207:    } 
        -:  208:    else
        -:  209:    {
    10568:  210:      return(FALSE);
        -:  211:    }  
        -:  212:  }
        -:  213:
    67669:  214:  if(is_spec_symbol(ch1)==TRUE) 
        -:  215:  {
     2737:  216:    return(TRUE); /* is special_symbol? */
        -:  217:  }
        -:  218:
    64932:  219:  if(ch ==' ' || ch=='\n' || ch==59) 
        -:  220:  {
     8071:  221:    return(TRUE); 
        -:  222:  }  
        -:  223:                              /* others until meet blank or tab or 59 */
    56861:  224:  return(FALSE);               /* other case,return FALSE */
        -:  225:}
        -:  226:
    24059:  227:static int token_type(tok)
        -:  228:token tok;
        -:  229:{ 
    24059:  230:  if(is_keyword(tok))
        -:  231:  {
     2357:  232:    return(keyword);
        -:  233:  }
        -:  234: 
    21702:  235:  if(is_spec_symbol(tok))
        -:  236:  {
     5236:  237:    return(spec_symbol);
        -:  238:  }
        -:  239:  
    16466:  240:  if(is_identifier(tok))
        -:  241:  {
     2908:  242:    return(identifier);
        -:  243:  }
        -:  244:  
    13558:  245:  if(is_num_constant(tok))
        -:  246:  {
     1279:  247:    return(num_constant);
        -:  248:  }
        -:  249:
    12279:  250:  if(is_str_constant(tok))
        -:  251:  {
     1408:  252:    return(str_constant);
        -:  253:  }
        -:  254:
    10871:  255:  if(is_char_constant(tok))
        -:  256:  {
      559:  257:    return(char_constant);
        -:  258:  }
        -:  259:  
    10312:  260:  if(is_comment(tok))
        -:  261:  {
     1660:  262:    return(comment);
        -:  263:  }
        -:  264:
     8652:  265:  if(is_eof_token(tok))
        -:  266:  {
     4055:  267:    return(end);
        -:  268:  }
        -:  269:
     4597:  270:  return(error);                    /* else look as error token */
        -:  271:}
        -:  272:
    24059:  273:int print_token(tok)
        -:  274:token tok;
        -:  275:{ 
        -:  276:  int type;
    24059:  277:  type=token_type(tok);
    24059:  278:  if(type==error)
        -:  279:  { 
     4597:  280:    fprintf(stdout, "error,\"%s\".\n",tok);
        -:  281:  } 
    24059:  282:  if(type==keyword)
        -:  283:  {
     2357:  284:    fprintf(stdout, "keyword,\"%s\".\n",tok);
        -:  285:  }
    24059:  286:  if(type==spec_symbol)
        -:  287:  {
     5236:  288:    print_spec_symbol(tok);
        -:  289:  }
    24059:  290:  if(type==identifier)
        -:  291:  {
     2908:  292:    fprintf(stdout, "identifier,\"%s\".\n",tok);
        -:  293:  }
    24059:  294:  if(type==num_constant)
        -:  295:  {
     1279:  296:    fprintf(stdout, "numeric,%s.\n",tok);
        -:  297:  }
    24059:  298:  if(type==str_constant)
        -:  299:  {
     1408:  300:    fprintf(stdout, "string,%s.\n",tok);
        -:  301:  }
    24059:  302:  if(type==char_constant)
        -:  303:  {
      559:  304:    tok=tok+1;
      559:  305:    fprintf(stdout, "character,\"%s\".\n",tok);
        -:  306:  }
    24059:  307:  if(type==end)
        -:  308:  {
     4055:  309:    fprintf(stdout, "eof.\n");
        -:  310:  } 
    24059:  311:}
        -:  312:
   174097:  313:int is_eof_token(tok)
        -:  314:token tok;
        -:  315:{ 
   174097:  316:  if( *tok==EOF)
        -:  317:  {
    13659:  318:    return(TRUE);
        -:  319:  }
        -:  320:  else
        -:  321:  {
   160438:  322:    return(FALSE);
        -:  323:  } 
        -:  324:}
        -:  325:
    10312:  326:static int is_comment(ident)
        -:  327:token ident;
        -:  328:{
    10312:  329:  if( (*ident) ==59 )   /* the char is 59   */
        -:  330:  {
     1660:  331:    return(TRUE);
        -:  332:  }
        -:  333:  else
        -:  334:  {
     8652:  335:    return(FALSE);
        -:  336:  }
        -:  337:}
        -:  338:
    24059:  339:static int is_keyword(str)
        -:  340:    token  str;
        -:  341:{ 
    24059:  342:  if (!strcmp(str,"and") || !strcmp(str,"or") || !strcmp(str,"if") ||
    22906:  343:    !strcmp(str,"xor")||!strcmp(str,"lambda")||!strcmp(str,"=>"))
        -:  344:  {
     2357:  345:    return(TRUE);
        -:  346:  }
        -:  347:  else
        -:  348:  {
    21702:  349:    return(FALSE);
        -:  350:  } 
        -:  351:}
        -:  352:
    10871:  353:static int is_char_constant(str)
        -:  354:    token str;
        -:  355:{
    10871:  356:  if ((*str)=='#' && isalpha(*(str+1)))
        -:  357:  {
      559:  358:    return(TRUE);
        -:  359:  }
        -:  360:  else
        -:  361:  {
    10312:  362:    return(FALSE);
        -:  363:  } 
        -:  364:}
        -:  365:
    13558:  366:static int is_num_constant(str)
        -:  367:    token  str;
        -:  368:{
    13558:  369:  int i=1;
    13558:  370:  if(isdigit(*str)) 
        -:  371:  {
     2662:  372:    while(*(str+i) != '\0')   /* until meet token end sign */
        -:  373:    {
     1383:  374:      if(isdigit(*(str+i)))
        -:  375:      {
      941:  376:        i++;
        -:  377:      } 
        -:  378:      else
        -:  379:      {
      442:  380:        return(FALSE);
        -:  381:      }
        -:  382:    }                         /* end WHILE */
     1279:  383:    return(TRUE);
        -:  384:  }
        -:  385:  else
        -:  386:  {
    11837:  387:    return(FALSE);               /* other return FALSE */
        -:  388:  }
        -:  389:}
        -:  390:
    12279:  391:static int is_str_constant(str)
        -:  392:    token str;
        -:  393:{
    12279:  394:  int i=1;
        -:  395: 
    12279:  396:  if ( *str =='"')
        -:  397:  { 
    22108:  398:    while (*(str+i)!='\0')  /* until meet the token end sign */
        -:  399:    { 
    21921:  400:      if(*(str+i)=='"')
        -:  401:      {
     1408:  402:        return(TRUE);        /* meet the second '"'           */
        -:  403:      }
        -:  404:      else
        -:  405:      {
    20513:  406:        i++;
        -:  407:      } 
        -:  408:    }               /* end WHILE */
      187:  409:    return(FALSE);
        -:  410:  }
        -:  411:  else
        -:  412:  {
    10684:  413:    return(FALSE);       /* other return FALSE */
        -:  414:  }
        -:  415:}
        -:  416:
    16466:  417:static int is_identifier(str)
        -:  418:    token  str;
        -:  419:{
    16466:  420:  int i=1;
        -:  421:
    16466:  422:  if(isalpha(*str)) 
        -:  423:  {
    23414:  424:    while(  *(str+i) !='\0' )   /* unti meet the end token sign */
        -:  425:    { 
    20506:  426:      if(isalpha(*(str+i)) || isdigit(*(str+i)))
        -:  427:      {
    18602:  428:        i++;
        -:  429:      }
        -:  430:      else
        -:  431:      {
     1904:  432:        return(FALSE);
        -:  433:      }
        -:  434:    }      /* end WHILE */
     2908:  435:    return(TRUE);
        -:  436:  }
        -:  437:  else
        -:  438:  {
    11654:  439:    return(FALSE);
        -:  440:  }
        -:  441:}
        -:  442:
      747:  443:static unget_error(fp)
        -:  444:character_stream *fp;
        -:  445:{
      747:  446:  fprintf(stdout,"It can not get charcter\n");
      747:  447:}
        -:  448:
     5236:  449:static void print_spec_symbol(str)
        -:  450:token str;
        -:  451:{
     5236:  452:    if(!strcmp(str,"("))
        -:  453:    {
      703:  454:      fprintf(stdout, "%s\n","lparen.");
      703:  455:      return;
        -:  456:    } 
     4533:  457:    if(!strcmp(str,")"))
        -:  458:    {
      763:  459:      fprintf(stdout, "%s\n","rparen.");
      763:  460:      return;
        -:  461:    }
     3770:  462:    if(!strcmp(str,"["))
        -:  463:    {
      740:  464:      fprintf(stdout, "%s\n","lsquare.");
      740:  465:      return;
        -:  466:    }
     3030:  467:    if(!strcmp(str,"]"))
        -:  468:    {
      803:  469:      fprintf(stdout, "%s\n","rsquare.");
      803:  470:      return;
        -:  471:    }
     2227:  472:    if(!strcmp(str,"'"))
        -:  473:    {
      731:  474:      fprintf(stdout, "%s\n","quote.");
      731:  475:      return;
        -:  476:    }
     1496:  477:    if (!strcmp(str,"`"))
        -:  478:    {
      768:  479:      fprintf(stdout, "%s\n","bquote.");
      768:  480:      return;
        -:  481:    }
        -:  482:    
      728:  483:    fprintf(stdout, "%s\n","comma.");
        -:  484:}
        -:  485:
   123396:  486:static int is_spec_symbol(str)
        -:  487:    token str;
        -:  488:{
   123396:  489:  if (!strcmp(str,"("))
        -:  490:  {  
     2130:  491:    return(TRUE);
        -:  492:  }
   121266:  493:  if (!strcmp(str,")"))
        -:  494:  {
     2302:  495:    return(TRUE);
        -:  496:  }
   118964:  497:  if (!strcmp(str,"["))
        -:  498:  {
     2270:  499:    return(TRUE);
        -:  500:  }
   116694:  501:  if (!strcmp(str,"]"))
        -:  502:  {
     2438:  503:    return(TRUE);
        -:  504:  }
   114256:  505:  if (!strcmp(str,"'"))
        -:  506:  {
     2226:  507:    return(TRUE);
        -:  508:  }
   112030:  509:  if (!strcmp(str,"`"))
        -:  510:  {
     2334:  511:    return(TRUE);
        -:  512:  }
   109696:  513:  if (!strcmp(str,","))
        -:  514:  {
     2246:  515:    return(TRUE);
        -:  516:  }
   107450:  517:  return(FALSE);     /* others return FALSE */
        -:  518:}
        -:  519:
        -:  520:
