        -:    0:Source:print_tokens2.c
        -:    0:Graph:print_tokens2.gcno
        -:    0:Data:print_tokens2.gcda
        -:    0:Runs:4115
        -:    1: 
        -:    2:#include <stdio.h>
        -:    3:#include <ctype.h>
        -:    4:#include <string.h>
        -:    5:#include "tokens.h"
        -:    6:#define TRUE 1
        -:    7:#define FALSE 0
        -:    8:
     4115:    9:main(argc,argv)
        -:   10:int argc;
        -:   11:char *argv[3];
        -:   12:{  
        -:   13:  char *fname;
        -:   14:  token tok;
        -:   15:  token_stream tp;
     4115:   16:  if(argc==1)                  /* if not given filename,take as '""' */
        -:   17:  {
     2955:   18:    fname= (char *) malloc(sizeof(char));
     2955:   19:    *fname = '\0';
        -:   20:  }
     1160:   21:  else if(argc==2)
        -:   22:  {
     1130:   23:    fname= argv[1];
        -:   24:  }
        -:   25:  else
        -:   26:  { 
       30:   27:    fprintf(stdout, "Error!,please give the token stream\n");
       30:   28:    exit(0);
        -:   29:  }
     4085:   30:  tp=open_token_stream(fname);  /* open token stream */
     4055:   31:  tok=get_token(tp);
    23151:   32:  while(is_eof_token(tok) ==FALSE) /* take one token each time until eof */
        -:   33:  {
    19096:   34:    print_token(tok);
    19096:   35:    tok=get_token(tp);
        -:   36:  }
     4055:   37:  print_token(tok); /* print eof signal */
     4055:   38:  exit(0);
        -:   39:}
        -:   40:
     4085:   41:character_stream open_character_stream(fname)
        -:   42:char *fname;
        -:   43:{ 
        -:   44:  character_stream fp;
     4085:   45:  if(fname == NULL)
        -:   46:  {
     2955:   47:    fp=stdin;
        -:   48:  }
     1130:   49:  else if ((fp=fopen(fname,"r"))== NULL)
        -:   50:  {
       30:   51:    fprintf(stdout, "The file %s doesn't exists\n",fname);
       30:   52:    exit(0);
        -:   53:  }
     4055:   54:  return(fp);
        -:   55:}
        -:   56:
   158391:   57:char get_char(fp)
        -:   58:character_stream fp;
        -:   59:{ 
        -:   60:  char ch;
   158391:   61:  ch=getc(fp);
   158391:   62:  return(ch);
        -:   63:}
        -:   64:
     3405:   65:char unget_char(ch,fp)
        -:   66:character_stream fp;
        -:   67:char ch;
        -:   68:{ 
        -:   69:  char c;
     3405:   70:  c=ungetc(ch,fp);
     3405:   71:  if(c ==EOF)
        -:   72:  {
      759:   73:    return(c);
        -:   74:  }
        -:   75:  else
        -:   76:  {
     2646:   77:    return(c);
        -:   78:  }
        -:   79:}
        -:   80:
        -:   81:char buffer[81];
        -:   82:static int is_spec_symbol();
        -:   83:static int is_token_end();
        -:   84:static unget_error();
        -:   85:static int is_keyword();
        -:   86:static int is_identifier();
        -:   87:static int is_num_constant();
        -:   88:static int is_char_constant();
        -:   89:static int is_str_constant();
        -:   90:static int is_comment();
        -:   91:static void print_spec_symbol();
        -:   92:
     4085:   93:token_stream open_token_stream(fname)
        -:   94:char *fname;
        -:   95:{
        -:   96:  token_stream fp;
     4085:   97:  if(strcmp(fname,"")==0)
        -:   98:  {
     2955:   99:    fp=open_character_stream(NULL);
        -:  100:  }
        -:  101:  else
        -:  102:  {
     1130:  103:    fp=open_character_stream(fname);
        -:  104:  }
     4055:  105:  return(fp);
        -:  106:}
        -:  107:
    23151:  108:token get_token(tp)
        -:  109:token_stream tp;
        -:  110:{ 
    23151:  111:  int i=0,j;
    23151:  112:  int id=0;
        -:  113:  char ch,ch1[2];
  1898382:  114:  for (j=0;j<=80;j++)          /* initial the buffer   */
        -:  115:  { 
  1875231:  116:    buffer[j]='\0';
        -:  117:  } 
    23151:  118:  ch1[0]='\0';
    23151:  119:  ch1[1]='\0';
    23151:  120:  ch=get_char(tp);
    54915:  121:  while(ch==' '||ch=='\n')      /* strip all blanks until meet characters */
        -:  122:  {
    31764:  123:    ch=get_char(tp);
        -:  124:  } 
    23151:  125:  buffer[i]=ch;
    23151:  126:  if(is_eof_token(buffer)==TRUE)
        -:  127:  {
     4055:  128:    return(buffer);
        -:  129:  }
    19096:  130:  if(is_spec_symbol(buffer)==TRUE)
        -:  131:  {
     4804:  132:    return(buffer); 
        -:  133:  }
    14292:  134:  if(ch =='"')
        -:  135:  {
     1563:  136:    id=1;    /* prepare for string */
        -:  137:  }
    14292:  138:  if(ch ==59)
        -:  139:  {
     1922:  140:    id=2;    /* prepare for comment */
        -:  141:  }
    14292:  142:  ch=get_char(tp);
        -:  143:
   103476:  144:  while(is_token_end(id,ch) == FALSE)/* until meet the end character */
        -:  145:  {
    89184:  146:    i++;
    89184:  147:    buffer[i]=ch;
    89184:  148:    ch=get_char(tp);
        -:  149:  }
    14292:  150:  ch1[0]=ch;                        /* hold the end charcater          */
    14292:  151:  if(is_eof_token(ch1)==TRUE)       /* if end character is eof token    */
        -:  152:  { 
      759:  153:    ch=unget_char(ch,tp);        /* then put back eof on token_stream */
      759:  154:    if(ch==EOF)
        -:  155:    {
      759:  156:      unget_error(tp);
        -:  157:    }
        -:  158:  }
    14292:  159:  if(is_spec_symbol(ch1)==TRUE)     /* if end character is special_symbol */
        -:  160:  { 
     2375:  161:    ch=unget_char(ch,tp);        /* then put back this character       */
     2375:  162:    if(ch==EOF)
        -:  163:    {
    #####:  164:      unget_error(tp);
        -:  165:    }
     2375:  166:    return(buffer);
        -:  167:  }
    11917:  168:  if(id==1)                  /* if end character is " and is string */
        -:  169:  { 
     1563:  170:    i++;                     /* case,hold the second " in buffer    */
     1563:  171:    buffer[i]=ch;
     1563:  172:    return(buffer); 
        -:  173:  }
    10354:  174:  if(id==0 && ch==59)
        -:  175:  { 
      271:  176:    ch=unget_char(ch,tp);       /* then put back this character         */
      271:  177:    if(ch==EOF)
        -:  178:    {
    #####:  179:      unget_error(tp);
        -:  180:    }
      271:  181:    return(buffer); 
        -:  182:  }
    10083:  183:  return(buffer);                   /* return nomal case token             */
        -:  184:}
        -:  185:
   103476:  186:static int is_token_end(str_com_id,ch)
        -:  187:char ch;
        -:  188:int str_com_id;
        -:  189:{ 
        -:  190:  char ch1[2];  /* fixed array declaration MONI */
   103476:  191:  ch1[0]=ch;
   103476:  192:  ch1[1]='\0';
   103476:  193:  if(is_eof_token(ch1)==TRUE)
        -:  194:  {
      759:  195:    return(TRUE); /* is eof token? */
        -:  196:  }
        -:  197:  
   102717:  198:  if(str_com_id==1)          /* is string token */
        -:  199:  { 
    21503:  200:    if(ch=='"' | ch=='\n')   /* for string until meet another " */
        -:  201:    {
     1530:  202:      return(TRUE);
        -:  203:    }
        -:  204:    else
        -:  205:    {
    19973:  206:      return(FALSE);
        -:  207:    } 
        -:  208:  }
        -:  209:
    81214:  210:  if(str_com_id==2)    /* is comment token */
        -:  211:  { 
    19215:  212:    if(ch=='\n')     /* for comment until meet end of line */
        -:  213:    {
     1876:  214:      return(TRUE);
        -:  215:    } 
        -:  216:    else
        -:  217:    {
    17339:  218:      return(FALSE);
        -:  219:    }  
        -:  220:  }
        -:  221:
    61999:  222:  if(is_spec_symbol(ch1)==TRUE) 
        -:  223:  {
     2375:  224:    return(TRUE); /* is special_symbol? */
        -:  225:  }
        -:  226:
    59624:  227:  if(ch ==' ' || ch=='\n' || ch==59) 
        -:  228:  {
     7752:  229:    return(TRUE); 
        -:  230:  }  
        -:  231:                              /* others until meet blank or tab or 59 */
    51872:  232:  return(FALSE);               /* other case,return FALSE */
        -:  233:}
        -:  234:
    23151:  235:static int token_type(tok)
        -:  236:token tok;
        -:  237:{ 
    23151:  238:  if(is_keyword(tok))
        -:  239:  {
     2337:  240:    return(keyword);
        -:  241:  }
        -:  242: 
    20814:  243:  if(is_spec_symbol(tok))
        -:  244:  {
     4804:  245:    return(spec_symbol);
        -:  246:  }
        -:  247:  
    16010:  248:  if(is_identifier(tok))
        -:  249:  {
     2786:  250:    return(identifier);
        -:  251:  }
        -:  252:  
    13224:  253:  if(is_num_constant(tok))
        -:  254:  {
     1253:  255:    return(num_constant);
        -:  256:  }
        -:  257:
    11971:  258:  if(is_str_constant(tok))
        -:  259:  {
     1388:  260:    return(str_constant);
        -:  261:  }
        -:  262:
    10583:  263:  if(is_char_constant(tok))
        -:  264:  {
      553:  265:    return(char_constant);
        -:  266:  }
        -:  267:  
    10030:  268:  if(is_comment(tok))
        -:  269:  {
     1922:  270:    return(comment);
        -:  271:  }
        -:  272:
     8108:  273:  if(is_eof_token(tok))
        -:  274:  {
     4055:  275:    return(end);
        -:  276:  }
        -:  277:
     4053:  278:  return(error);                    /* else look as error token */
        -:  279:}
        -:  280:
    23151:  281:int print_token(tok)
        -:  282:token tok;
        -:  283:{ 
        -:  284:  int type;
    23151:  285:  type=token_type(tok);
    23151:  286:  if(type==error)
        -:  287:  { 
     4053:  288:    fprintf(stdout, "error,\"%s\".\n",tok);
        -:  289:  } 
    23151:  290:  if(type==keyword)
        -:  291:  {
     2337:  292:    fprintf(stdout, "keyword,\"%s\".\n",tok);
        -:  293:  }
    23151:  294:  if(type==spec_symbol)
        -:  295:  {
     4804:  296:    print_spec_symbol(tok);
        -:  297:  }
    23151:  298:  if(type==identifier)
        -:  299:  {
     2786:  300:    fprintf(stdout, "identifier,\"%s\".\n",tok);
        -:  301:  }
    23151:  302:  if(type==num_constant)
        -:  303:  {
     1253:  304:    fprintf(stdout, "numeric,%s.\n",tok);
        -:  305:  }
    23151:  306:  if(type==str_constant)
        -:  307:  {
     1388:  308:    fprintf(stdout, "string,%s.\n",tok);
        -:  309:  }
    23151:  310:  if(type==char_constant)
        -:  311:  {
      553:  312:    tok=tok+1;
      553:  313:    fprintf(stdout, "character,\"%s\".\n",tok);
        -:  314:  }
    23151:  315:  if(type==end)
        -:  316:  {
     4055:  317:    fprintf(stdout, "eof.\n");
        -:  318:  } 
    23151:  319:}
        -:  320:
   172178:  321:int is_eof_token(tok)
        -:  322:token tok;
        -:  323:{ 
   172178:  324:  if( *tok==EOF)
        -:  325:  {
    13683:  326:    return(TRUE);
        -:  327:  }
        -:  328:  else
        -:  329:  {
   158495:  330:    return(FALSE);
        -:  331:  } 
        -:  332:}
        -:  333:
    10030:  334:static int is_comment(ident)
        -:  335:token ident;
        -:  336:{
    10030:  337:  if( (*ident) ==59 )   /* the char is 59   */
        -:  338:  {
     1922:  339:    return(TRUE);
        -:  340:  }
        -:  341:  else
        -:  342:  {
     8108:  343:    return(FALSE);
        -:  344:  }
        -:  345:}
        -:  346:
    23151:  347:static int is_keyword(str)
        -:  348:    token  str;
        -:  349:{ 
    23151:  350:  if (!strcmp(str,"and") || !strcmp(str,"or") || !strcmp(str,"if") ||
    22012:  351:    !strcmp(str,"xor")||!strcmp(str,"lambda")||!strcmp(str,"=>"))
        -:  352:  {
     2337:  353:    return(TRUE);
        -:  354:  }
        -:  355:  else
        -:  356:  {
    20814:  357:    return(FALSE);
        -:  358:  } 
        -:  359:}
        -:  360:
    10583:  361:static int is_char_constant(str)
        -:  362:    token str;
        -:  363:{
    10583:  364:  if ((*str)=='#' && isalpha(*(str+1)))
        -:  365:  {
      553:  366:    return(TRUE);
        -:  367:  }
        -:  368:  else
        -:  369:  {
    10030:  370:    return(FALSE);
        -:  371:  } 
        -:  372:}
        -:  373:
    13224:  374:static int is_num_constant(str)
        -:  375:    token  str;
        -:  376:{
    13224:  377:  int i=1;
    13224:  378:  if(isdigit(*str)) 
        -:  379:  {
     2557:  380:    while(*(str+i) != '\0')   /* until meet token end sign */
        -:  381:    {
     1304:  382:      if(isdigit(*(str+i)))
        -:  383:      {
      919:  384:        i++;
        -:  385:      } 
        -:  386:      else
        -:  387:      {
      385:  388:        return(FALSE);
        -:  389:      }
        -:  390:    }                         /* end WHILE */
     1253:  391:    return(TRUE);
        -:  392:  }
        -:  393:  else
        -:  394:  {
    11586:  395:    return(FALSE);               /* other return FALSE */
        -:  396:  }
        -:  397:}
        -:  398:
    11971:  399:static int is_str_constant(str)
        -:  400:    token str;
        -:  401:{
    11971:  402:  int i=1;
        -:  403: 
    11971:  404:  if ( *str =='"')
        -:  405:  { 
    21711:  406:    while (*(str+i)!='\0')  /* until meet the token end sign */
        -:  407:    { 
    21536:  408:      if(*(str+i)=='"')
        -:  409:      {
     1388:  410:        return(TRUE);        /* meet the second '"'           */
        -:  411:      }
        -:  412:      else
        -:  413:      {
    20148:  414:        i++;
        -:  415:      } 
        -:  416:    }               /* end WHILE */
      175:  417:    return(FALSE);
        -:  418:  }
        -:  419:  else
        -:  420:  {
    10408:  421:    return(FALSE);       /* other return FALSE */
        -:  422:  }
        -:  423:}
        -:  424:
    16010:  425:static int is_identifier(str)
        -:  426:    token  str;
        -:  427:{
    16010:  428:  int i=1;
        -:  429:
    16010:  430:  if(isalpha(*str)) 
        -:  431:  {
    22196:  432:    while(  *(str+i) !='\0' )   /* unti meet the end token sign */
        -:  433:    { 
    19410:  434:      if(isalpha(*(str+i)) || isdigit(*(str+i)))
        -:  435:      {
    17784:  436:        i++;
        -:  437:      }
        -:  438:      else
        -:  439:      {
     1626:  440:        return(FALSE);
        -:  441:      }
        -:  442:    }      /* end WHILE */
     2786:  443:    return(TRUE);
        -:  444:  }
        -:  445:  else
        -:  446:  {
    11598:  447:    return(FALSE);
        -:  448:  }
        -:  449:}
        -:  450:
      759:  451:static unget_error(fp)
        -:  452:character_stream *fp;
        -:  453:{
      759:  454:  fprintf(stdout,"It can not get charcter\n");
      759:  455:}
        -:  456:
     4804:  457:static void print_spec_symbol(str)
        -:  458:token str;
        -:  459:{
     4804:  460:    if(!strcmp(str,"("))
        -:  461:    {
      630:  462:      fprintf(stdout, "%s\n","lparen.");
      630:  463:      return;
        -:  464:    } 
     4174:  465:    if(!strcmp(str,")"))
        -:  466:    {
      690:  467:      fprintf(stdout, "%s\n","rparen.");
      690:  468:      return;
        -:  469:    }
     3484:  470:    if(!strcmp(str,"["))
        -:  471:    {
      679:  472:      fprintf(stdout, "%s\n","lsquare.");
      679:  473:      return;
        -:  474:    }
     2805:  475:    if(!strcmp(str,"]"))
        -:  476:    {
      736:  477:      fprintf(stdout, "%s\n","rsquare.");
      736:  478:      return;
        -:  479:    }
     2069:  480:    if(!strcmp(str,"'"))
        -:  481:    {
      676:  482:      fprintf(stdout, "%s\n","quote.");
      676:  483:      return;
        -:  484:    }
     1393:  485:    if (!strcmp(str,"`"))
        -:  486:    {
      707:  487:      fprintf(stdout, "%s\n","bquote.");
      707:  488:      return;
        -:  489:    }
        -:  490:    
      686:  491:    fprintf(stdout, "%s\n","comma.");
        -:  492:}
        -:  493:
   116201:  494:static int is_spec_symbol(str)
        -:  495:    token str;
        -:  496:{
   116201:  497:  if (!strcmp(str,"("))
        -:  498:  {  
     1862:  499:    return(TRUE);
        -:  500:  }
   114339:  501:  if (!strcmp(str,")"))
        -:  502:  {
     2026:  503:    return(TRUE);
        -:  504:  }
   112313:  505:  if (!strcmp(str,"["))
        -:  506:  {
     2050:  507:    return(TRUE);
        -:  508:  }
   110263:  509:  if (!strcmp(str,"]"))
        -:  510:  {
     2192:  511:    return(TRUE);
        -:  512:  }
   108071:  513:  if (!strcmp(str,"'"))
        -:  514:  {
     2026:  515:    return(TRUE);
        -:  516:  }
   106045:  517:  if (!strcmp(str,"`"))
        -:  518:  {
     2108:  519:    return(TRUE);
        -:  520:  }
   103937:  521:  if (!strcmp(str,","))
        -:  522:  {
     2094:  523:    return(TRUE);
        -:  524:  }
   101843:  525:  return(FALSE);     /* others return FALSE */
        -:  526:}
        -:  527:
        -:  528:
