        -:    0:Source:print_tokens_instrumented.c
        -:    0:Graph:print_tokens_instrumented.gcno
        -:    0:Data:print_tokens_instrumented.gcda
        -:    0:Runs:4130
        -:    1:
        -:    2:
        -:    3:# include <ctype.h>
        -:    4:#include <signal.h>
        -:    5:
        -:    6:# define START  5
        -:    7:# define TRUE  1
        -:    8:# define FALSE 0
        -:    9:
        -:   10:typedef int BOOLEAN;
        -:   11:typedef char *string;
        -:   12:
        -:   13:# include <stdio.h>
        -:   14:# include "tokens.h"
        -:   15:
        -:   16:static token numeric_case();
        -:   17:static token error_or_eof_case();
        -:   18:static int check_delimiter();
        -:   19:static int keyword(int state);
        -:   20:static int special(int state);
        -:   21:static skip(character_stream stream_ptr);
        -:   22:static int constant(int state,char token_str[],int token_ind);
        -:   23:static int next_state();
        -:   24:static get_actual_token(char token_str[],int token_ind);
        -:   25:
        -:   26:FILE* file_name = NULL;
        -:   27:
        -:   28:// Signal handler for SIGSEGV 
        -:   29:// add by mshadow
    #####:   30:void segfault_handler(int sig) {
    #####:   31:    exit(sig);  // Exit the program
        -:   32:}
        -:   33:
     4130:   34:main(argc,argv)
        -:   35:int argc;
        -:   36:char *argv[];
        -:   37:{   
     4130:   38:    signal(SIGSEGV, segfault_handler);
     4130:   39:    file_name=fopen("v5.txt","a+"); 
     4130:   40:    if(!file_name)
        -:   41:    {	
    #####:   42:        printf("File could not be opened! \n");
    #####:   43:        fclose(file_name);
    #####:   44:        exit(0);
        -:   45:    }
        -:   46:	
        -:   47:    token token_ptr;
        -:   48:    token_stream stream_ptr;
     4130:   49:    fprintf(file_name,"\nP1,");
     4130:   50:    if(argc>2)
        -:   51:    {
       30:   52:        fprintf(file_name,"P2,");
       30:   53:        fprintf(stdout, "The format is print_tokens filename(optional)\n");
       30:   54:        fclose(file_name);
       30:   55:        exit(1);
        -:   56:    }
        -:   57:    
     4100:   58:    stream_ptr=open_token_stream(argv[1]);
     4070:   59:    fprintf(file_name,"P3,");
    32971:   60:    while(!is_eof_token((token_ptr=get_token(stream_ptr))))
        -:   61:    {
    28901:   62:        fprintf(file_name,"P4,");
    28901:   63:        print_token(token_ptr);
        -:   64:    }
        -:   65:            
     4070:   66:    fprintf(file_name,"P5,");
     4070:   67:    print_token(token_ptr);
     4070:   68:    fclose(file_name);
     4070:   69:    exit(0);
        -:   70:}
        -:   71:
     4100:   72:character_stream open_character_stream(FILENAME)
        -:   73:string FILENAME;
        -:   74:{
        -:   75:    character_stream stream_ptr;
     4100:   76:    stream_ptr=(character_stream)malloc(sizeof(struct stream_type));
     4100:   77:    stream_ptr->stream_ind=START;
     4100:   78:    stream_ptr->stream[START]='\0';
     4100:   79:    fprintf(file_name,"P6,");
     4100:   80:    if(FILENAME == NULL)
        -:   81:    {
     2963:   82:        fprintf(file_name,"P7,");
     2963:   83:        stream_ptr->fp=stdin;
        -:   84:    }
     1137:   85:    else if((stream_ptr->fp=fopen(FILENAME,"r"))==NULL)
        -:   86:    {
       30:   87:        fprintf(file_name,"P8,");
       30:   88:        fprintf(stdout, "The file %s doesn't exists\n",FILENAME);
       30:   89:        fclose(file_name);
       30:   90:        exit(0);
        -:   91:    }
     4070:   92:    fprintf(file_name,"P9,");
     4070:   93:    return(stream_ptr);
        -:   94:}
        -:   95:
   175134:   96:CHARACTER get_char(stream_ptr)
        -:   97:character_stream stream_ptr;
        -:   98:{
   175134:   99:    fprintf(file_name,"P10,");
   175134:  100:    if(stream_ptr->stream[stream_ptr->stream_ind] == '\0')
        -:  101:    {
    12791:  102:        fprintf(file_name,"P11,");
    12791:  103:        if(fgets(stream_ptr->stream+START,80-START,stream_ptr->fp) == NULL)/* Fix bug: add -START - hf*/
        -:  104:        {
     4070:  105:            fprintf(file_name,"P12,");
     4070:  106:            stream_ptr->stream[START]=EOF;
        -:  107:        }
    12791:  108:        fprintf(file_name,"P13,");
    12791:  109:        stream_ptr->stream_ind=START;
        -:  110:    }
   175134:  111:    fprintf(file_name,"P14,");
   175134:  112:    return(stream_ptr->stream[(stream_ptr->stream_ind)++]);
        -:  113:}
        -:  114:
    28898:  115:BOOLEAN is_end_of_character_stream(stream_ptr)
        -:  116:character_stream stream_ptr;
        -:  117:{
    28898:  118:    fprintf(file_name,"P15,");
    28898:  119:    if(stream_ptr->stream[stream_ptr->stream_ind-1] == EOF)
        -:  120:	{
     4110:  121:        fprintf(file_name,"P16,");
     4110:  122:        return(TRUE);
        -:  123:    } 
        -:  124:    else
        -:  125:    {
    24788:  126:        fprintf(file_name,"P17,");
    24788:  127:        return(FALSE);
        -:  128:    }
        -:  129:        
        -:  130:}
        -:  131:
    14162:  132:unget_char(ch,stream_ptr)
        -:  133:CHARACTER ch;
        -:  134:character_stream stream_ptr;
        -:  135:{
    14162:  136:    fprintf(file_name,"P18,");
    14162:  137:    if(stream_ptr->stream_ind == 0)
        -:  138:	{
    #####:  139:        fprintf(file_name,"P19,");
    #####:  140:        return;
        -:  141:    }
        -:  142:    else
        -:  143:	{
    14162:  144:        fprintf(file_name,"P20,");
    14162:  145:        stream_ptr->stream[--(stream_ptr->stream_ind)]=ch;
        -:  146:    }
    14162:  147:    fprintf(file_name,"P21,");  
    14162:  148:    return;
        -:  149:}
        -:  150:
     4100:  151:token_stream open_token_stream(FILENAME)
        -:  152:string FILENAME;
        -:  153:{
     4100:  154:    fprintf(file_name,"P22,");  
        -:  155:    token_stream token_ptr;
     4100:  156:    token_ptr=(token_stream)malloc(sizeof(struct token_stream_type));
     4100:  157:    token_ptr->ch_stream=open_character_stream(FILENAME);
     4070:  158:    return(token_ptr);
        -:  159:}
        -:  160:
    32971:  161:token get_token(tstream_ptr)
        -:  162:token_stream tstream_ptr;
        -:  163:{
        -:  164:    char token_str[80]; /* This buffer stores the current token */
        -:  165:    int token_ind;      /* Index to the token_str  */
        -:  166:    token token_ptr;
        -:  167:    CHARACTER ch;
        -:  168:    int cu_state,next_st,token_found;
    32971:  169:    token_ptr=(token)(malloc(sizeof(struct token_type)));
    32971:  170:    ch=get_char(tstream_ptr->ch_stream);
    32971:  171:    cu_state=token_ind=token_found=0;
    32971:  172:    fprintf(file_name,"P23,");  
   151459:  173:    while(!token_found)
        -:  174:    {
   151459:  175:        fprintf(file_name,"P24,");
   151459:  176:        if(token_ind < 80) /* ADDED ERROR CHECK - hf */
        -:  177:        {
   151347:  178:            fprintf(file_name,"P25,");
   151347:  179:            token_str[token_ind++]=ch;
   151347:  180:            next_st=next_state(cu_state,ch);
        -:  181:        }
        -:  182:        else
        -:  183:        {
      112:  184:            fprintf(file_name,"P26,");
      112:  185:            next_st = -1; /* - hf */
        -:  186:        }
   151459:  187:        if (next_st == -1) 
        -:  188:        {
    11201:  189:            fprintf(file_name,"P27,");
    32971:  190:            return(error_or_eof_case(tstream_ptr, token_ptr,cu_state,token_str,token_ind,ch));
        -:  191:        } 
   140258:  192:        else if (next_st == -2) 
        -:  193:        {
     2527:  194:            fprintf(file_name,"P28,");
     2527:  195:            return(numeric_case(tstream_ptr,token_ptr,ch, token_str,token_ind));
        -:  196:        } 
   137731:  197:        else if (next_st == -3) 
        -:  198:        {
     8441:  199:            fprintf(file_name,"P29,");
     8441:  200:            token_ptr->token_id=IDENTIFIER;
     8441:  201:            unget_char(ch,tstream_ptr->ch_stream);
     8441:  202:            token_ind--;
     8441:  203:            get_actual_token(token_str,token_ind);
     8441:  204:            strcpy(token_ptr->token_string,token_str);
     8441:  205:            return(token_ptr);
        -:  206:        } 
        -:  207:
   129290:  208:        fprintf(file_name,"P30,");  
   129290:  209:        switch(next_st) 
        -:  210:        { 
   116556:  211:            default : 
   116556:  212:                fprintf(file_name,"P31,"); 
   116556:  213:                break;
     2217:  214:            case 6  : /* These are all KEYWORD cases. */
        -:  215:            case 9  :
        -:  216:            case 11 :
        -:  217:            case 13 :
        -:  218:            
        -:  219:			case 16 :
     2217:  220:                ch=get_char(tstream_ptr->ch_stream);
     2217:  221:                fprintf(file_name,"P32,");
     2217:  222:                if(check_delimiter(ch)==TRUE)
        -:  223:                {
     2178:  224:                    fprintf(file_name,"P33,");
     2178:  225:                    token_ptr->token_id=keyword(next_st);
     2178:  226:                    unget_char(ch,tstream_ptr->ch_stream);
     2178:  227:                    token_ptr->token_string[0]='\0';
     2178:  228:                    return(token_ptr);
        -:  229:                }
       39:  230:                fprintf(file_name,"P34,");
       39:  231:                unget_char(ch,tstream_ptr->ch_stream);
       39:  232:                break;
     5031:  233:            case 19 : /* These are all special SPECIAL character */
        -:  234:            case 20 : /* cases */
        -:  235:            case 21 :
        -:  236:            case 22 :
        -:  237:            case 23 :
        -:  238:            case 24 :
        -:  239:            case 25 :
        -:  240:            case 32 : 
     5031:  241:                fprintf(file_name,"P35,");
     5031:  242:                token_ptr->token_id=special(next_st);
     5031:  243:                token_ptr->token_string[0]='\0';
     5031:  244:                return(token_ptr);
     3593:  245:            case 27 : /* These are constant cases */
        -:  246:            case 29 :
     3593:  247:                fprintf(file_name,"P36,");
     3593:  248:                token_ptr->token_id=constant(next_st,token_str,token_ind);
     3593:  249:                get_actual_token(token_str,token_ind);
     3593:  250:                strcpy(token_ptr->token_string,token_str);
     3593:  251:                return(token_ptr);
     1893:  252:            case 30 :  /* This is COMMENT case */
     1893:  253:                fprintf(file_name,"P37,");
     1893:  254:                skip(tstream_ptr->ch_stream);
     1893:  255:                /* missing code token_ind= */ next_st=0;
     1893:  256:                break;
        -:  257:        }
   118488:  258:        fprintf(file_name,"P38,");
   118488:  259:        cu_state=next_st;
   118488:  260:        ch=get_char(tstream_ptr->ch_stream);
        -:  261:    }
    #####:  262:}
        -:  263:
     2527:  264:static token numeric_case(tstream_ptr,token_ptr,ch,token_str,token_ind)
        -:  265:token_stream tstream_ptr;
        -:  266:token token_ptr;
        -:  267:char ch,token_str[];
        -:  268:int token_ind;
        -:  269:{
     2527:  270:    fprintf(file_name,"P39,");
     2527:  271:    if(check_delimiter(ch)!=TRUE)
        -:  272:    {   /* Error case */
      613:  273:        token_ptr->token_id=ERROR;
      613:  274:        fprintf(file_name,"P40,");
     2521:  275:        while(check_delimiter(ch)==FALSE)
        -:  276:        {
     1908:  277:            fprintf(file_name,"P41,");
     1908:  278:            if(token_ind >= 80)
        -:  279:            {
    #####:  280:                fprintf(file_name,"P42,");
    #####:  281:                break;
        -:  282:            }
     1908:  283:            fprintf(file_name,"P43,");  
     1908:  284:            token_str[token_ind++]=ch=get_char(tstream_ptr->ch_stream);
        -:  285:        }
      613:  286:        fprintf(file_name,"P44,");
      613:  287:        unget_char(ch,tstream_ptr->ch_stream);
      613:  288:        token_ind--;
      613:  289:        get_actual_token(token_str,token_ind);
      613:  290:        strcpy(token_ptr->token_string,token_str);
      613:  291:        return(token_ptr);
        -:  292:    }
     1914:  293:    fprintf(file_name,"P45,");
     1914:  294:    token_ptr->token_id=NUMERIC; /* Numeric case */
     1914:  295:    unget_char(ch,tstream_ptr->ch_stream);
     1914:  296:    token_ind--;
     1914:  297:    get_actual_token(token_str,token_ind);
     1914:  298:    strcpy(token_ptr->token_string,token_str);
     1914:  299:    return(token_ptr);
        -:  300:}
        -:  301:
    11201:  302:static token error_or_eof_case(tstream_ptr,token_ptr,cu_state,token_str,token_ind,ch)
        -:  303:token_stream tstream_ptr;
        -:  304:token token_ptr;
        -:  305:int cu_state,token_ind;
        -:  306:char token_str[],ch;
        -:  307:{
    11201:  308:    fprintf(file_name,"P46,");
    11201:  309:    if(is_end_of_character_stream(tstream_ptr->ch_stream)) 
        -:  310:    {
     4070:  311:        fprintf(file_name,"P47,");
     4070:  312:        token_ptr->token_id = EOTSTREAM;
     4070:  313:        token_ptr->token_string[0]='\0';
     4070:  314:        return(token_ptr);
        -:  315:    }
     7131:  316:    fprintf(file_name,"P48,");
     7131:  317:    if(cu_state !=0)
        -:  318:    {
      937:  319:        fprintf(file_name,"P49,");
      937:  320:        unget_char(ch,tstream_ptr->ch_stream);
      937:  321:        token_ind--;
        -:  322:    }
     7131:  323:    fprintf(file_name,"P50,");
     7131:  324:    token_ptr->token_id=ERROR;
     7131:  325:    get_actual_token(token_str,token_ind);
     7131:  326:    strcpy(token_ptr->token_string,token_str);
     7131:  327:    return(token_ptr);                
        -:  328:}
        -:  329:
     7265:  330:static int check_delimiter(ch)
        -:  331:char ch;
        -:  332:{
     7265:  333:    fprintf(file_name,"P51,");
     7265:  334:    if(!isalpha(ch) && !isdigit(ch))
        -:  335:    {
     4705:  336:        fprintf(file_name,"P52,");
     4705:  337:        return(TRUE);
        -:  338:    }
     2560:  339:    fprintf(file_name,"P53,");
     2560:  340:    return(FALSE);
        -:  341:}
        -:  342:
     2178:  343:static int keyword(state)
        -:  344:int state;
        -:  345:{
     2178:  346:    fprintf(file_name,"P54,"); 
     2178:  347:    switch(state)
        -:  348:    {   /* Return the respective macro for the Keyword. */
      450:  349:        case 6 : 
      450:  350:            fprintf(file_name,"P55,"); 
      450:  351:            return(LAMBDA);
      446:  352:        case 9 : 
      446:  353:            fprintf(file_name,"P56,"); 
      446:  354:            return(AND);
      429:  355:        case 11:   
      429:  356:            fprintf(file_name,"P57,"); 
      429:  357:            return(OR);
      407:  358:        case 13: 
      407:  359:            fprintf(file_name,"P58,"); 
      407:  360:            return(IF);
      446:  361:        case 16:   
      446:  362:            fprintf(file_name,"P59,"); 
      446:  363:            return(XOR);
    #####:  364:        default: 
    #####:  365:            fprintf(file_name,"P60,"); 
    #####:  366:            fprintf(stdout, "error\n");break;
        -:  367:    }
    #####:  368:    fprintf(file_name,"P61,");
    #####:  369:    fclose(file_name);
    #####:  370:    exit(0);
        -:  371:}
        -:  372:
     5031:  373:static int special(state)
        -:  374:int state;
        -:  375:{
     5031:  376:    fprintf(file_name,"P62,"); 
     5031:  377:    switch(state)
        -:  378:    {   /* return the respective macro for the special character. */
      606:  379:        case 19: 
      606:  380:            fprintf(file_name,"P63,"); 
      606:  381:            return(LPAREN);
      652:  382:        case 20: 
      652:  383:            fprintf(file_name,"P64,"); 
      652:  384:            return(RPAREN);
      653:  385:        case 21: 
      653:  386:            fprintf(file_name,"P65,"); 
      653:  387:            return(LSQUARE);
      671:  388:        case 22: 
      671:  389:            fprintf(file_name,"P66,"); 
      671:  390:            return(RSQUARE);
      660:  391:        case 23: 
      660:  392:            fprintf(file_name,"P67,"); 
      660:  393:            return(QUOTE);
      654:  394:        case 24: 
      654:  395:            fprintf(file_name,"P68,"); 
      654:  396:            return(BQUOTE);
      633:  397:        case 25: 
      633:  398:            fprintf(file_name,"P69,"); 
      633:  399:            return(COMMA);
      502:  400:        case 32: 
      502:  401:            fprintf(file_name,"P70,"); 
      502:  402:            return(EQUALGREATER);
    #####:  403:        default: 
    #####:  404:            fprintf(file_name,"P71,");
    #####:  405:            fprintf(stdout, "error\n");break;
        -:  406:    }
    #####:  407:    fprintf(file_name,"P72,");
    #####:  408:    fclose(file_name);
    #####:  409:    exit(0);
        -:  410:}
        -:  411:
     1893:  412:static skip(stream_ptr)
        -:  413:character_stream stream_ptr;
        -:  414:{
        -:  415:    char c;
     1893:  416:    fprintf(file_name,"P73,"); 
    19550:  417:    while((c=get_char(stream_ptr))!='\n' && !is_end_of_character_stream(stream_ptr));
        -:  418:
     1893:  419:    fprintf(file_name,"P74,"); 
     1893:  420:	if(c==EOF)
        -:  421:    {
       40:  422:        fprintf(file_name,"P75,");
       40:  423:        unget_char(c, stream_ptr); /* Put back to leave gracefully - hf */
        -:  424:    }
     1893:  425:    fprintf(file_name,"P76,");
     1893:  426:    return;
        -:  427:}
        -:  428:
     3593:  429:static int constant(state,token_str,token_ind)
        -:  430:int state,token_ind;
        -:  431:char token_str[];
        -:  432:{
     3593:  433:    fprintf(file_name,"P77,"); 
     3593:  434:    switch(state)
        -:  435:    {   /* Return the respective CONSTANT macro. */
     1691:  436:        case 27 : 
     1691:  437:            fprintf(file_name,"P78,"); 
     1691:  438:            return(STRING_CONSTANT);
     1902:  439:        case 29 : 
     1902:  440:            fprintf(file_name,"P79,"); 
     1902:  441:            token_str[token_ind-2]=' '; 
     1902:  442:            return(CHARACTER_CONSTANT);
    #####:  443:        default : 
    #####:  444:            fprintf(file_name,"P80,");
    #####:  445:            break;
        -:  446:    }
    #####:  447:}
        -:  448:              
   234976:  449:static int next_state(state,ch)
        -:  450:int state;
        -:  451:char ch;
        -:  452:{
   234976:  453:    fprintf(file_name,"P81,"); 
   234976:  454:    if(state < 0)
        -:  455:    {
    22057:  456:        fprintf(file_name,"P82,");
    22057:  457:        return(state);
        -:  458:    }
        -:  459:    
   212919:  460:    fprintf(file_name,"P83,"); 
   212919:  461:    if(base[state]+ch >= 0)
        -:  462:    {
   201980:  463:        fprintf(file_name,"P84,"); 
   201980:  464:        if(check[base[state]+ch] == state) /* Check for the right state */
        -:  465:        {
   129290:  466:            fprintf(file_name,"P85,");
   129290:  467:            return(next[base[state]+ch]);
        -:  468:        }   
        -:  469:        else
        -:  470:        {
    72690:  471:            fprintf(file_name,"P86,");
    72690:  472:            return(next_state(default1[state],ch));
        -:  473:        }
        -:  474:    }
        -:  475:    else
        -:  476:    {
    10939:  477:        fprintf(file_name,"P87,");
    10939:  478:        return(next_state(default1[state],ch));
        -:  479:    }
        -:  480:}
        -:  481:
    32971:  482:BOOLEAN is_eof_token(t)
        -:  483:token t;
        -:  484:{
    32971:  485:    fprintf(file_name,"P88,"); 
    32971:  486:    if(t->token_id==EOTSTREAM)
        -:  487:    {
     4070:  488:        fprintf(file_name,"P89,");
     4070:  489:        return(TRUE);
        -:  490:    }
    28901:  491:    fprintf(file_name,"P90,");    
    28901:  492:    return(FALSE);
        -:  493:}
        -:  494:
    32971:  495:BOOLEAN print_token(token_ptr)
        -:  496:token token_ptr;
        -:  497:{
    32971:  498:    fprintf(file_name,"P91,"); 
    32971:  499:    switch(token_ptr->token_id)
        -:  500:    {    /* Print the respective tokens. */
     7744:  501:        case ERROR : 
     7744:  502:            fprintf(file_name,"P92,"); 
     7744:  503:            fprintf(stdout, "error,\t\"");
     7744:  504:            fprintf(stdout, "%s",token_ptr->token_string);
     7744:  505:            fprintf(stdout, "\".\n");
     7744:  506:            return(TRUE);
        -:  507:
     4070:  508:        case EOTSTREAM : 
     4070:  509:            fprintf(file_name,"P93,"); 
     4070:  510:            fprintf(stdout, "eof.\n");
     4070:  511:            return(TRUE);
        -:  512:
      450:  513:        case 6 : 
      450:  514:            fprintf(file_name,"P94,"); 
      450:  515:            fprintf(stdout, "keyword,\t\"lambda\".\n");
      450:  516:            return(TRUE);
        -:  517:
      446:  518:        case 9 : 
      446:  519:            fprintf(file_name,"P95,"); 
      446:  520:            fprintf(stdout, "keyword,\t\"and\".\n");
      446:  521:            return(TRUE);
        -:  522:
      429:  523:        case 11: 
      429:  524:            fprintf(file_name,"P96,"); 
      429:  525:            fprintf(stdout, "keyword,\t\"or\".\n");
      429:  526:            return(TRUE);
        -:  527:
      407:  528:        case 13: 
      407:  529:            fprintf(file_name,"P97,"); 
      407:  530:            fprintf(stdout, "keyword,\t\"if\".\n");
      407:  531:            return(TRUE);
        -:  532:
      446:  533:        case 16: 
      446:  534:            fprintf(file_name,"P98,"); 
      446:  535:            fprintf(stdout, "keyword,\t\"xor\".\n");
      446:  536:            return(TRUE);
        -:  537:
     8441:  538:        case 17: 
     8441:  539:            fprintf(file_name,"P99,"); 
     8441:  540:            fprintf(stdout, "identifier,\t\"");
     8441:  541:            fprintf(stdout, "%s",token_ptr->token_string);
     8441:  542:            fprintf(stdout, "\".\n");
     8441:  543:            return(TRUE);
        -:  544:
     1914:  545:        case 18: 
     1914:  546:            fprintf(file_name,"P100,"); 
     1914:  547:            fprintf(stdout, "numeric,\t");
     1914:  548:            fprintf(stdout, "%s",token_ptr->token_string);
     1914:  549:            fprintf(stdout, ".\n");
     1914:  550:            return(TRUE);
        -:  551:
      606:  552:        case 19: 
      606:  553:            fprintf(file_name,"P101,"); 
      606:  554:            fprintf(stdout, "lparen.\n");
      606:  555:            return(TRUE);
        -:  556:
      652:  557:        case 20: 
      652:  558:            fprintf(file_name,"P102,"); 
      652:  559:            fprintf(stdout, "rparen.\n");
      652:  560:            return(TRUE);
        -:  561:
      653:  562:        case 21: 
      653:  563:            fprintf(file_name,"P103,"); 
      653:  564:            fprintf(stdout, "lsquare.\n");
      653:  565:            return(TRUE);
        -:  566:
      671:  567:        case 22: 
      671:  568:            fprintf(file_name,"P104,"); 
      671:  569:            fprintf(stdout, "rsquare.\n");
      671:  570:            return(TRUE);
        -:  571:
      660:  572:        case 23: 
      660:  573:            fprintf(file_name,"P105,"); 
      660:  574:            fprintf(stdout, "quote.\n");
      660:  575:            return(TRUE);
        -:  576:
      654:  577:        case 24: 
      654:  578:            fprintf(file_name,"P106,"); 
      654:  579:            fprintf(stdout, "bquote.\n");
      654:  580:            return(TRUE);
        -:  581:
      633:  582:        case 25: 
      633:  583:            fprintf(file_name,"P107,"); 
      633:  584:            fprintf(stdout, "comma.\n");
      633:  585:            return(TRUE);
        -:  586:
     1691:  587:        case 27: 
     1691:  588:            fprintf(file_name,"P108,"); 
     1691:  589:            fprintf(stdout, "string,\t");
     1691:  590:            fprintf(stdout, "%s",token_ptr->token_string);
     1691:  591:            fprintf(stdout, ".\n");
     1691:  592:            return(TRUE);
        -:  593:
     1902:  594:        case 29: 
     1902:  595:            fprintf(file_name,"P109,"); 
     1902:  596:            fprintf(stdout, "character,\t\"");
     1902:  597:            fprintf(stdout, "%s",token_ptr->token_string);
     1902:  598:            fprintf(stdout, "\".\n");
     1902:  599:            return(TRUE);
        -:  600:
      502:  601:        case 32: 
      502:  602:            fprintf(file_name,"P110,"); 
      502:  603:            fprintf(stdout, "keyword,\t\"=>\".\n");
      502:  604:            return(TRUE);
        -:  605:
    #####:  606:        default: 
    #####:  607:            fprintf(file_name,"P111,");
    #####:  608:            break;
        -:  609:    }
    #####:  610:    fprintf(file_name,"P112,");
    #####:  611:    return(FALSE);
        -:  612:}
        -:  613:
    21692:  614:static get_actual_token(token_str,token_ind)
        -:  615:int token_ind;
        -:  616:char token_str[];
        -:  617:{
        -:  618:    int ind,start;
    21692:  619:    fprintf(file_name,"P113,");
    25842:  620:    for(ind=token_ind;ind>0 && isspace(token_str[ind-1]);--ind);
    21692:  621:    fprintf(file_name,"P114,");
    21692:  622:    token_str[ind]='\0';token_ind=ind;
    21692:  623:    fprintf(file_name,"P115,");
    37600:  624:    for(ind=0;ind<token_ind;++ind)
        -:  625:    {
    37555:  626:        fprintf(file_name,"P116,");
    37555:  627:        if(!isspace(token_str[ind]))
        -:  628:        {
    21647:  629:            fprintf(file_name,"P117,");
    21647:  630:            break;
        -:  631:        }
        -:  632:    }
        -:  633:        
    21692:  634:    fprintf(file_name,"P118,");   
   127516:  635:    for(start=0;ind<=token_ind;++start,++ind)
        -:  636:    {
   105824:  637:        fprintf(file_name,"P119,");
   105824:  638:        token_str[start]=token_str[ind];
        -:  639:    }
    21692:  640:    fprintf(file_name,"P120,");
    21692:  641:    return;
        -:  642:}
