        -:    0:Source:replace_instrumented.c
        -:    0:Graph:replace_instrumented.gcno
        -:    0:Data:replace_instrumented.gcda
        -:    0:Runs:5542
        -:    1:/*  -*- Last-Edit:  Mon Dec  7 10:31:51 1992 by Tarak S. Goradia; -*- */
        -:    2:
        -:    3:extern void	exit();
        -:    4:# include <stdio.h>
        -:    5:#include <signal.h>
        -:    6:
        -:    7:void	Caseerror();
        -:    8:
        -:    9:typedef char	bool;
        -:   10:# define false 0
        -:   11:# define true  1
        -:   12:# define NULL 0
        -:   13:
        -:   14:# define MAXSTR 100
        -:   15:# define MAXPAT MAXSTR
        -:   16:
        -:   17:# define ENDSTR  '\0'
        -:   18:# define ESCAPE  '@'
        -:   19:# define CLOSURE '*'
        -:   20:# define BOL     '%'
        -:   21:# define EOL     '$'
        -:   22:# define ANY     '?'
        -:   23:# define CCL     '['
        -:   24:# define CCLEND  ']'
        -:   25:# define NEGATE  '^'
        -:   26:# define NCCL    '!'
        -:   27:# define LITCHAR 'c'
        -:   28:# define DITTO   -1
        -:   29:# define DASH    '-'
        -:   30:
        -:   31:# define TAB     9
        -:   32:# define NEWLINE 10
        -:   33:
        -:   34:# define CLOSIZE 1
        -:   35:FILE* file_name = NULL;
        -:   36:
        -:   37:// Signal handler for SIGSEGV 
        -:   38:// add by mshadow
    #####:   39:void segfault_handler(int sig) {
    #####:   40:    exit(sig);  // Exit the program
        -:   41:}
        -:   42:
        -:   43:
        -:   44:typedef char	character;
        -:   45:typedef char string[MAXSTR];
        -:   46:
        -:   47:void
    14789:   48:get_line(s, maxsize, result)
        -:   49:char	*s;
        -:   50:int	maxsize;
        -:   51:bool *result;
        -:   52:{
    14789:   53:	fprintf(file_name,"P11,");
    14789:   54:    *result = true;
    14789:   55:    if (!fgets(s, 104, stdin)) 
        -:   56:	{
     4658:   57:      fprintf(file_name,"P141,");
     4658:   58:	  *result = 0;
        -:   59:    }
    14789:   60:}
        -:   61:int
   182913:   62:addstr(c, outset, j, maxset)
        -:   63:char c;
        -:   64:char *outset;
        -:   65:int	*j;
        -:   66:int	maxset;
        -:   67:{
        -:   68:    bool result;
   182913:   69:	fprintf(file_name,"P12,");
   182913:   70:    if (*j >= maxset)
        -:   71:	{
    45218:   72:		fprintf(file_name,"P13,");
    45218:   73:		result = false;
        -:   74:	}
        -:   75:    else 
        -:   76:	{
   137695:   77:		fprintf(file_name,"P14,");
   137695:   78:		outset[*j] = c;
   137695:   79:		*j = *j + 1;
   137695:   80:		result = true;
        -:   81:    }
   182913:   82:	fprintf(file_name,"P15,");
   182913:   83:    return result;
        -:   84:}
        -:   85:
        -:   86:char
    75119:   87:esc(s, i)
        -:   88:char *s;
        -:   89:int	*i;
        -:   90:{
        -:   91:    char result;
    75119:   92:	fprintf(file_name,"P16,");
    75119:   93:    if (s[*i] != ESCAPE)
        -:   94:	{
    69922:   95:		fprintf(file_name,"P17,");
    69922:   96:		result = s[*i];
        -:   97:	}
     5197:   98:    else if (s[*i + 1] == ENDSTR)
        -:   99:	{
       53:  100:		fprintf(file_name,"P18,");
       53:  101:		result = ESCAPE;
        -:  102:	}
        -:  103:	else 
        -:  104:	{
     5144:  105:	    *i = *i + 1;
     5144:  106:	    fprintf(file_name,"P19,");
     5144:  107:		if (s[*i] == 'n')
        -:  108:		{
     1001:  109:			fprintf(file_name,"P20,");
     1001:  110:			result = NEWLINE;
        -:  111:		}
     4143:  112:	    else if (s[*i] == 't')
        -:  113:		{
      879:  114:			fprintf(file_name,"P21,");
      879:  115:			result = TAB;
        -:  116:		}
        -:  117:		else
        -:  118:		{
     3264:  119:			fprintf(file_name,"P22,");
     3264:  120:			result = s[*i];
        -:  121:		}  
        -:  122:	}
    75119:  123:	fprintf(file_name,"P23,");
    75119:  124:    return result;
        -:  125:}
        -:  126:
        -:  127:void change();
        -:  128:
        -:  129:void
     6360:  130:dodash(delim, src, i, dest, j, maxset)
        -:  131:char delim;
        -:  132:char *src;
        -:  133:int	*i;
        -:  134:char *dest;
        -:  135:int	*j;
        -:  136:int	maxset;
        -:  137:{
        -:  138:    int	k;
        -:  139:    bool junk;
        -:  140:    char escjunk;
     6360:  141:	fprintf(file_name,"P24,");
    24340:  142:    while ((src[*i] != delim) && (src[*i] != ENDSTR)) 
        -:  143:    {
    17980:  144:		fprintf(file_name,"P25,");
    17980:  145:		if (src[*i - 1] == ESCAPE) 
        -:  146:		{
      566:  147:			fprintf(file_name,"P26,");
      566:  148:			escjunk = esc(src, i);
      566:  149:			junk = addstr(escjunk, dest, j, maxset);
        -:  150:		} 
    17414:  151:		else if (src[*i] != DASH)
        -:  152:		{
    10753:  153:			fprintf(file_name,"P27,");
    10753:  154:			junk = addstr(src[*i], dest, j, maxset);
        -:  155:		}
     6661:  156:		else if (*j <= 1 || src[*i + 1] == ENDSTR)
        -:  157:		{
       96:  158:			fprintf(file_name,"P28,");
       96:  159:			junk = addstr(DASH, dest, j, maxset);
        -:  160:		}
     6565:  161:		else if ((isalnum(src[*i - 1])) && (isalnum(src[*i + 1])) && (src[*i - 1] <= src[*i + 1]))
        -:  162:		{
     4825:  163:			fprintf(file_name,"P29,");
    39699:  164:			for (k = src[*i-1]+1; k<=src[*i+1]; k++) 
        -:  165:			{
    34874:  166:				fprintf(file_name,"P30,");
    34874:  167:				junk = addstr(k, dest, j, maxset);
        -:  168:			}
     4825:  169:			fprintf(file_name,"P31,");	
     4825:  170:			*i = *i + 1;	
        -:  171:		} 
        -:  172:		else
        -:  173:		{
     1740:  174:			fprintf(file_name,"P32,");
     1740:  175:			junk = addstr(DASH, dest, j, maxset);
        -:  176:		}	
    17980:  177:		fprintf(file_name,"P33,");
    17980:  178:		(*i) = (*i) + 1;
        -:  179:    }
     6360:  180:}
        -:  181:
        -:  182:bool
     6360:  183:getccl(arg, i, pat, j)
        -:  184:char *arg;
        -:  185:int	*i;
        -:  186:char *pat;
        -:  187:int	*j;
        -:  188:{
        -:  189:    int	jstart;
        -:  190:    bool junk;
     6360:  191:    *i = *i + 1;
     6360:  192:	fprintf(file_name,"P34,");
     6360:  193:    if (arg[*i] == NEGATE) 
        -:  194:	{
     3053:  195:		fprintf(file_name,"P35,");
     3053:  196:		junk = addstr(NCCL, pat, j, MAXPAT);
     3053:  197:		*i = *i + 1;
        -:  198:    } 
        -:  199:	else
        -:  200:	{
     3307:  201:		fprintf(file_name,"P36,");
     3307:  202:		junk = addstr(CCL, pat, j, MAXPAT);
        -:  203:	}
     6360:  204:	fprintf(file_name,"P37,");
     6360:  205:    jstart = *j;
     6360:  206:    junk = addstr(0, pat, j, MAXPAT);
     6360:  207:    dodash(CCLEND, arg, i, pat, j, MAXPAT);
     6360:  208:    pat[jstart] = *j - jstart - 1;
     6360:  209:    return (arg[*i] == CCLEND);
        -:  210:}
        -:  211:
        -:  212:void
     1968:  213:stclose(pat, j, lastj)
        -:  214:char *pat;
        -:  215:int	*j;
        -:  216:int	lastj;
        -:  217:{
        -:  218:    int	jt;
        -:  219:    int	jp;
        -:  220:    bool junk;
     1968:  221:	fprintf(file_name,"P38,");
     7078:  222:    for (jp = *j - 1; jp >= lastj ; jp--) 
        -:  223:    {
     5110:  224:		fprintf(file_name,"P39,");
     5110:  225:		jt = jp + CLOSIZE;
     5110:  226:		junk = addstr(pat[jp], pat, &jt, MAXPAT);
        -:  227:    }
     1968:  228:	fprintf(file_name,"P40,");
     1968:  229:    *j = *j + CLOSIZE;
     1968:  230:    pat[lastj] = CLOSURE;
     1968:  231:}
        -:  232:
     2048:  233:bool in_set_2(c)
        -:  234:char c;
        -:  235:{
     2048:  236:	fprintf(file_name,"P41,");
     2048:  237:  	return (c == BOL || c == EOL || c == CLOSURE);
        -:  238:}      
        -:  239:
   303049:  240:bool in_pat_set(c)
        -:  241:char c;
        -:  242:{
   303049:  243:	fprintf(file_name,"P42,");
  303049*:  244:  	return (c == LITCHAR || c == BOL || c == EOL || c == ANY || c == CCL || c == NCCL || c == CLOSURE);
        -:  245:}      
        -:  246:
        -:  247:int
     5520:  248:makepat(arg, start, delim, pat)
        -:  249:char	*arg;
        -:  250:int	start;
        -:  251:char	delim;
        -:  252:char	*pat;
        -:  253:{
        -:  254:    int	result;
        -:  255:    int	i, j, lastj, lj;
        -:  256:    bool done, junk;
        -:  257:    bool getres;
        -:  258:    char escjunk;
        -:  259:
     5520:  260:    j = 0;
     5520:  261:    i = start;
     5520:  262:    lastj = 0;
     5520:  263:    done = false;
     5520:  264:	fprintf(file_name,"P43,");
    44034:  265:    while ((!done) && (arg[i] != delim) && (arg[i] != ENDSTR)) 
        -:  266:	{
    38514:  267:		lj = j;
    38514:  268:		fprintf(file_name,"P44,");
    38514:  269:		if ((arg[i] == ANY))
        -:  270:		{
     3447:  271:			fprintf(file_name,"P45,");
     3447:  272:			junk = addstr(ANY, pat, &j, MAXPAT);
        -:  273:		}
    35067:  274:		else if ((arg[i] == BOL) && (i == start))
        -:  275:		{
      387:  276:			fprintf(file_name,"P46,");
      387:  277:			junk = addstr(BOL, pat, &j, MAXPAT);
        -:  278:		}
    34680:  279:		else if ((arg[i] == EOL) && (arg[i+1] == delim))
        -:  280:		{
      410:  281:			fprintf(file_name,"P47,");
      410:  282:			junk = addstr(EOL, pat, &j, MAXPAT);
        -:  283:		}
    34270:  284:		else if ((arg[i] == CCL)) 
        -:  285:		{
     6360:  286:			fprintf(file_name,"P48,");
     6360:  287:			getres = getccl(arg, &i, pat, &j);
     6360:  288:			done = (bool)(getres == false);
        -:  289:		} 
    27910:  290:		else if ((arg[i] == CLOSURE) && (i > start)) 
        -:  291:		{
     2048:  292:			fprintf(file_name,"P49,");
     2048:  293:			lj = lastj;
     2048:  294:			if (in_set_2(pat[lj]))
        -:  295:			{
       80:  296:				fprintf(file_name,"P50,");
       80:  297:				done = true;
        -:  298:			}	
        -:  299:			else
        -:  300:			{
     1968:  301:				fprintf(file_name,"P51,");
     1968:  302:				stclose(pat, &j, lastj);
        -:  303:			}
        -:  304:		} 
        -:  305:		else 
        -:  306:		{
    25862:  307:			fprintf(file_name,"P52,");
    25862:  308:			junk = addstr(LITCHAR, pat, &j, MAXPAT);
    25862:  309:			escjunk = esc(arg, &i);
    25862:  310:			junk = addstr(escjunk, pat, &j, MAXPAT);
        -:  311:		}
        -:  312:		
    38514:  313:		lastj = lj;
    38514:  314:		fprintf(file_name,"P53,");
    38514:  315:		if ((!done))
        -:  316:		{
    38110:  317:			fprintf(file_name,"P54,");
    38110:  318:			i = i + 1;
        -:  319:		}
        -:  320:    }	
     5520:  321:    junk = addstr(ENDSTR, pat, &j, MAXPAT);
     5520:  322:    fprintf(file_name,"P55,");
     5520:  323:	if ((done) || (arg[i] != delim))
        -:  324:	{
      404:  325:		fprintf(file_name,"P56,");
      404:  326:		result = 0;
        -:  327:	}
     5116:  328:    else if ((!junk))
        -:  329:	{
      106:  330:		fprintf(file_name,"P57,");
      106:  331:		result = 0;
        -:  332:	}
        -:  333:	else
        -:  334:	{
     5010:  335:		fprintf(file_name,"P58,");
     5010:  336:		result = i;
        -:  337:	}
     5520:  338:	fprintf(file_name,"P59,");
     5520:  339:    return result;
        -:  340:}
        -:  341:
        -:  342:int
     5520:  343:getpat(arg, pat)
        -:  344:char* arg;
        -:  345:char* pat;
        -:  346:{
     5520:  347:	fprintf(file_name,"P60,");
        -:  348:    int	makeres;
     5520:  349:    makeres = makepat(arg, 0, ENDSTR, pat);
     5520:  350:    return (makeres > 0);
        -:  351:}
        -:  352:
        -:  353:int
     4838:  354:makesub(arg, from, delim, sub)
        -:  355:char* arg;
        -:  356:int	from;
        -:  357:character delim;
        -:  358:char*	sub;
        -:  359:{
        -:  360:    int  result;
        -:  361:    int	i, j;
        -:  362:    bool	junk;
        -:  363:    character	escjunk;
        -:  364:
     4838:  365:    j = 0;
     4838:  366:    i = from;
        -:  367:
     4838:  368:	fprintf(file_name,"P61,");
    55566:  369:    while ((arg[i] != delim) && (arg[i] != ENDSTR)) 
        -:  370:	{
    50728:  371:		fprintf(file_name,"P62,");
    50728:  372:		if ((arg[i] == (unsigned)('&')))
        -:  373:		{
     2037:  374:			fprintf(file_name,"P63,");
     2037:  375:			junk = addstr(DITTO, sub, &j, MAXPAT);
        -:  376:		}
        -:  377:		else 
        -:  378:		{
    48691:  379:			fprintf(file_name,"P64,");
    48691:  380:			escjunk = esc(arg, &i);
    48691:  381:			junk = addstr(escjunk, sub, &j, MAXPAT);
        -:  382:		}
    50728:  383:		fprintf(file_name,"P65,");
    50728:  384:		i = i + 1;
        -:  385:    }
     4838:  386:	fprintf(file_name,"P66,");
     4838:  387:    if (arg[i] != delim)
        -:  388:	{
    #####:  389:		fprintf(file_name,"P67,");
    #####:  390:		result = 0;
        -:  391:	}
        -:  392:    else 
        -:  393:	{
     4838:  394:		junk = addstr(ENDSTR, &(*sub), &j, MAXPAT);
     4838:  395:		fprintf(file_name,"P68,");
     4838:  396:		if ((!junk))
        -:  397:		{
       62:  398:			fprintf(file_name,"P69,");
       62:  399:			result = 0;
        -:  400:		}
        -:  401:		else
        -:  402:		{
     4776:  403:			fprintf(file_name,"P70,");
     4776:  404:			result = i;
        -:  405:		}	
        -:  406:    }
     4838:  407:	fprintf(file_name,"P71,");	
     4838:  408:    return result;
        -:  409:}
        -:  410:
        -:  411:bool
     4838:  412:getsub(arg, sub)
        -:  413:char* arg;
        -:  414:char* sub;
        -:  415:{
     4838:  416:	fprintf(file_name,"P72,");
        -:  417:    int	makeres;
     4838:  418:    makeres = makesub(arg, 0, ENDSTR, sub);
     4838:  419:    return (makeres > 0);
        -:  420:}
        -:  421:
        -:  422:void subline();
        -:  423:
        -:  424:bool
    50574:  425:locate(c, pat, offset)
        -:  426:character c;
        -:  427:char* pat;
        -:  428:int	offset;
        -:  429:{
        -:  430:    int	i;
        -:  431:    bool flag;
    50574:  432:    flag = false;
    50574:  433:    i = offset + pat[offset];
        -:  434:
    50574:  435:    fprintf(file_name,"P73,");
   382139:  436:	while ((i > offset))
        -:  437:    {
   331565:  438:		fprintf(file_name,"P74,");
   331565:  439:		if (c == pat[i]) 
        -:  440:		{
    15129:  441:			fprintf(file_name,"P75,");
    15129:  442:			flag = true;
    15129:  443:			i = offset;
        -:  444:		} 
        -:  445:		else
        -:  446:		{
   316436:  447:			fprintf(file_name,"P76,");
   316436:  448:			i = i - 1;
        -:  449:		}
        -:  450:    }
        -:  451:
    50574:  452:	fprintf(file_name,"P77,");
    50574:  453:    return flag;
        -:  454:}
        -:  455:
        -:  456:bool
   203997:  457:omatch(lin, i, pat, j)
        -:  458:char* lin;
        -:  459:int	*i;
        -:  460:char* pat;
        -:  461:int	j;
        -:  462:{
        -:  463:    char advance;
        -:  464:    bool result;
   203997:  465:    advance = -1;
        -:  466:
   203997:  467:	fprintf(file_name,"P78,");
   203997:  468:    if ((lin[*i] == ENDSTR))
        -:  469:	{
      362:  470:		fprintf(file_name,"P79,");
      362:  471:		result = false;
        -:  472:	}
        -:  473:    else 
        -:  474:    {
   203635:  475:		fprintf(file_name,"P80,");
   203635:  476:		if (!in_pat_set(pat[j]))
        -:  477:		{
    #####:  478:			fprintf(file_name,"P81,");
    #####:  479:			(void)fprintf(stdout, "in omatch: can't happen\n");
    #####:  480:			abort();	
        -:  481:		} 
        -:  482:		else
        -:  483:		{
   203635:  484:			fprintf(file_name,"P82,");
   203635:  485:			switch (pat[j]) 
        -:  486:			{			
   118448:  487:				case LITCHAR:
   118448:  488:					fprintf(file_name,"P83,");
   118448:  489:					if (lin[*i] == pat[j + 1])
        -:  490:					{
    26019:  491:						fprintf(file_name,"P84,");
    26019:  492:						advance = 1;
        -:  493:					}
   118448:  494:					fprintf(file_name,"P85,");
   118448:  495:					break ;	
     6345:  496:				case BOL:
     6345:  497:					fprintf(file_name,"P86,");
     6345:  498:					if (*i == 0)
        -:  499:					{
      695:  500:						fprintf(file_name,"P87,");
      695:  501:						advance = 0;
        -:  502:					}
     6345:  503:					fprintf(file_name,"P88,");
     6345:  504:					break ;
    22999:  505:				case ANY:
    22999:  506:				    fprintf(file_name,"P89,");
    22999:  507:					if (lin[*i] != NEWLINE)
        -:  508:					{
    21336:  509:						fprintf(file_name,"P90,");
    21336:  510:						advance = 1;
        -:  511:					}
    22999:  512:					fprintf(file_name,"P91,");
    22999:  513:					break ;
     4227:  514:				case EOL:
     4227:  515:				 	fprintf(file_name,"P92,");
     4227:  516:					if (lin[*i] == NEWLINE)
        -:  517:					{
      655:  518:						fprintf(file_name,"P93,");
      655:  519:						advance = 0;
        -:  520:					}
     4227:  521:					fprintf(file_name,"P94,");	
     4227:  522:					break ;
    34488:  523:				case CCL:
    34488:  524:					fprintf(file_name,"P95,");
    34488:  525:					if (locate(lin[*i], pat, j + 1))
        -:  526:					{
    13270:  527:						fprintf(file_name,"P96,");
    13270:  528:						advance = 1;
        -:  529:					}
    34488:  530:					fprintf(file_name,"P97,");
    34488:  531:					break ;
    17128:  532:				case NCCL:
    17128:  533:					fprintf(file_name,"P98,");
    17128:  534:					if ((lin[*i] != NEWLINE) && (!locate(lin[*i], pat, j+1)))
        -:  535:					{
    14227:  536:						fprintf(file_name,"P99,");
    14227:  537:						advance = 1;	
        -:  538:					}
    17128:  539:					fprintf(file_name,"P100,");
    17128:  540:					break;
    #####:  541:				default:
    #####:  542:					fprintf(file_name,"P101,");
    #####:  543:					Caseerror(pat[j]);
        -:  544:			};
        -:  545:		}	
        -:  546:    }
   203997:  547:    if ((advance >= 0)) 
        -:  548:    {
    76202:  549:		fprintf(file_name,"P102,");
    76202:  550:		*i = *i + advance;
    76202:  551:		result = true;
        -:  552:    } 
        -:  553:	else
        -:  554:	{
   127795:  555:		fprintf(file_name,"P103,");
   127795:  556:		result = false;
        -:  557:	}
   203997:  558:	fprintf(file_name,"P104,");
   203997:  559:    return result;
        -:  560:}
        -:  561:
        -:  562:
    99414:  563:patsize(pat, n)
        -:  564:char*	pat;
        -:  565:int	n;
        -:  566:{
        -:  567:    int size;
    99414:  568:	fprintf(file_name,"P105,");
    99414:  569:    if (!in_pat_set(pat[n])) 
        -:  570:	{
    #####:  571:		fprintf(file_name,"P106,");
    #####:  572:		(void)fprintf(stdout, "in patsize: can't happen\n");
    #####:  573:		abort();
        -:  574:    } 
        -:  575:	else
        -:  576:	{
    99414:  577:		fprintf(file_name,"P107,");
    99414:  578:		switch (pat[n]) 
        -:  579:		{
    33620:  580:		case LITCHAR: 
    33620:  581:			fprintf(file_name,"P108,");
    33620:  582:			size = 2; 
    33620:  583:			break;
        -:  584:			
    21187:  585:		case BOL:  
        -:  586:		case EOL:  
        -:  587:		case ANY:
    21187:  588:			fprintf(file_name,"P109,");
    21187:  589:			size = 1;
    21187:  590:			break;
    26599:  591:		case CCL:  
        -:  592:		case NCCL:
    26599:  593:			fprintf(file_name,"P110,");
    26599:  594:			size = pat[n + 1] + 2;
    26599:  595:			break ;
    18008:  596:		case CLOSURE:
    18008:  597:			fprintf(file_name,"P111,");
    18008:  598:			size = CLOSIZE;
    18008:  599:			break ;
    #####:  600:		default:
    #####:  601:			fprintf(file_name,"P112,");
    #####:  602:			Caseerror(pat[n]);
        -:  603:		}
        -:  604:	}
        -:  605:
    99414:  606:    return size;
        -:  607:}
        -:  608:
        -:  609:int
   158511:  610:amatch(lin, offset, pat, j)
        -:  611:char*	lin;
        -:  612:int	offset;
        -:  613:char*	pat;
        -:  614:int	j;
        -:  615:{
        -:  616:    int	i, k;
        -:  617:    bool result, done;
   158511:  618:    done = false;
        -:  619:
   158511:  620:	fprintf(file_name,"P113,");
   343466:  621:    while ((!done) && (pat[j] != ENDSTR))
        -:  622:	{
   184955:  623:		fprintf(file_name,"P114,");
   184955:  624:		if ((pat[j] == CLOSURE)) 
        -:  625:		{
    18008:  626:			j = j + patsize(pat, j);
    18008:  627:			i = offset;
    18008:  628:			fprintf(file_name,"P115,");
    55058:  629:			while ((!done) && (lin[i] != ENDSTR)) 
        -:  630:			{
    37050:  631:				result = omatch(lin, &i, pat, j);
    37050:  632:				fprintf(file_name,"P115,");
    37050:  633:				if (!result)
        -:  634:				{
    17783:  635:					fprintf(file_name,"P117,");
    17783:  636:					done = true;
        -:  637:				}		
        -:  638:			}
    18008:  639:			done = false;
    18008:  640:			fprintf(file_name,"P118,");
    42479:  641:			while ((!done) && (i >= offset)) 
        -:  642:			{
    24471:  643:				k = amatch(lin, i, pat, j + patsize(pat, j));
    24471:  644:				fprintf(file_name,"P119,");
    24471:  645:				if ((k >= 0))
        -:  646:				{
    11112:  647:					fprintf(file_name,"P120,");
    11112:  648:					done = true;
        -:  649:				}
        -:  650:				else
        -:  651:				{
    13359:  652:					fprintf(file_name,"P121,");
    13359:  653:					i = i - 1;
        -:  654:				}	
        -:  655:			}
    18008:  656:			fprintf(file_name,"P122,");
    18008:  657:			offset = k;
    18008:  658:			done = true;
        -:  659:		} 
        -:  660:		else 
        -:  661:		{
   166947:  662:			result = omatch(lin, &offset, pat, j);
   166947:  663:			fprintf(file_name,"P123,");
   166947:  664:			if ((!result)) 
        -:  665:			{
   110012:  666:				fprintf(file_name,"P124,");
   110012:  667:				offset = -1;
   110012:  668:				done = true;
        -:  669:			}
        -:  670:			else
        -:  671:			{
    56935:  672:				fprintf(file_name,"P125,");
    56935:  673:				j = j + patsize(pat, j);
        -:  674:			}
        -:  675:		}
        -:  676:	}
   158511:  677:	fprintf(file_name,"P126,");
   158511:  678:	return offset;
        -:  679:}
        -:  680:
        -:  681:void
    29788:  682:putsub(lin, s1, s2, sub)
        -:  683:char* lin;
        -:  684:int	s1, s2;
        -:  685:char* sub;
        -:  686:{
        -:  687:    int	i;
        -:  688:    int	j;
    29788:  689:    i = 0;
    29788:  690:	fprintf(file_name,"P127,");
   389862:  691:    while ((sub[i] != ENDSTR)) 
        -:  692:	{
   360074:  693:		fprintf(file_name,"P128,");
   360074:  694:		if ((sub[i] == DITTO))
        -:  695:		{
    25813:  696:			fprintf(file_name,"P129,");
    59194:  697:			for (j = s1; j < s2; j++) 
        -:  698:		    {
    33381:  699:				fprintf(file_name,"P130,");
    33381:  700:				fputc(lin[j],stdout);
        -:  701:		    }
        -:  702:		}
        -:  703:		else	
        -:  704:		{
   334261:  705:			fprintf(file_name,"P131,");
   334261:  706:		    fputc(sub[i],stdout);
        -:  707:		}
   360074:  708:		fprintf(file_name,"P132,");
   360074:  709:		i = i + 1;
        -:  710:    }
    29788:  711:}
        -:  712:
        -:  713:void
    10131:  714:subline(lin, pat, sub)
        -:  715:char *lin;
        -:  716:char *pat;
        -:  717:char *sub;
        -:  718:{	
        -:  719:	int	i, lastm, m;
    10131:  720:	lastm = -1;
    10131:  721:	i = 0;
    10131:  722:	fprintf(file_name,"P133,");
   144171:  723:	while ((lin[i] != ENDSTR)) 
        -:  724:	{
   134040:  725:	    m = amatch(lin, i, pat, 0);
   134040:  726:	    fprintf(file_name,"P134,");
   134040:  727:		if ((m >= 0) && (lastm != m)) 
        -:  728:		{
    29788:  729:			fprintf(file_name,"P135,");
    29788:  730:			putsub(lin, i, m, sub);
    29788:  731:			lastm = m;
        -:  732:	    }
   134040:  733:		fprintf(file_name,"P136,");
   134040:  734:	    if ((m == -1) || (m == i))
        -:  735:		{
   111303:  736:			fprintf(file_name,"P137,");
   111303:  737:			fputc(lin[i],stdout);
   111303:  738:			i = i + 1;
        -:  739:	    } 
        -:  740:		else
        -:  741:		{
    22737:  742:			fprintf(file_name,"P138,");
    22737:  743:			i = m;
        -:  744:		}
        -:  745:	}
    10131:  746:}
        -:  747:
        -:  748:void
     4658:  749:change(pat, sub)
        -:  750:char *pat, *sub;
        -:  751:{
        -:  752:    string  line;
        -:  753:    bool result;
     4658:  754:    get_line(line, MAXSTR, &result);
        -:  755:	
     4658:  756:    fprintf(file_name,"P139,");
    14789:  757:	while ((result)) 
        -:  758:	{
    10131:  759:		fprintf(file_name,"P140,");
    10131:  760:		subline(line, pat, sub);
    10131:  761:		get_line(line, MAXSTR, &result);
        -:  762:    }
     4658:  763:}
        -:  764:
     5542:  765:main(argc, argv)
        -:  766:int	argc;
        -:  767:char	*argv[];
        -:  768:{
     5542:  769:	signal(SIGSEGV, segfault_handler);
     5542:  770:	file_name=fopen("v19.txt","a+"); 
     5542:  771:    if(!file_name)
        -:  772:    {	
    #####:  773:        printf("File could not be opened! \n");
    #####:  774:        fclose(file_name);
    #####:  775:        exit(0);
        -:  776:    }
        -:  777:	string pat, sub;
        -:  778:	bool result;
        -:  779:
     5542:  780:	fprintf(file_name,"\nP1,");
     5542:  781:	if (argc < 2) 
        -:  782:	{
       22:  783:		fprintf(file_name,"P2,");
       22:  784:		(void)fprintf(stdout, "usage: change from [to]\n");
       22:  785:		exit(1);
        -:  786:	};
        -:  787:	
     5520:  788:	result = getpat(argv[1], pat);
     5520:  789:	fprintf(file_name,"P3,");
     5520:  790:	if (!result)
        -:  791:	{
      570:  792:		fprintf(file_name,"P4,");
      570:  793:		(void)fprintf(stdout, "change: illegal \"from\" pattern\n");
      570:  794:		exit(2);
        -:  795:	}
        -:  796:
     4950:  797:	fprintf(file_name,"P5,");
     4950:  798:	if (argc >= 3)
        -:  799:	{
     4838:  800:		result = getsub(argv[2], sub);
     4838:  801:		fprintf(file_name,"P6,");
     4838:  802:		if (!result)
        -:  803:		{	
      292:  804:			fprintf(file_name,"P7,");
      292:  805:			(void)fprintf(stdout, "change: illegal \"to\" string\n");
      292:  806:			exit(3);
        -:  807:		}
        -:  808:	} 
        -:  809:	else
        -:  810:	{
      112:  811:		fprintf(file_name,"P8,");
      112:  812:		sub[0] = '\0';
        -:  813:	}
        -:  814:
     4658:  815:	fprintf(file_name,"P9,");
     4658:  816:	change(pat, sub);
     4658:  817:	return 0;
        -:  818:}
        -:  819:
        -:  820:void
    #####:  821:Caseerror(n)
        -:  822:int	n;
        -:  823:{
    #####:  824:	fprintf(file_name,"P10,");
    #####:  825:	(void)fprintf(stdout, "Missing case limb: line %d\n", n);
    #####:  826:	exit(4);
        -:  827:}
