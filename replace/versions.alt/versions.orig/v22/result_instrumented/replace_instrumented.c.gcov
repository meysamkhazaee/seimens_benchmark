        -:    0:Source:replace_instrumented.c
        -:    0:Graph:replace_instrumented.gcno
        -:    0:Data:replace_instrumented.gcda
        -:    0:Runs:5542
        -:    1:/*  -*- Last-Edit:  Mon Dec  7 10:31:51 1992 by Tarak S. Goradia; -*- */
        -:    2:
        -:    3:extern void	exit();
        -:    4:# include <stdio.h>
        -:    5:#include <signal.h>
        -:    6:
        -:    7:void	Caseerror();
        -:    8:
        -:    9:typedef char	bool;
        -:   10:# define false 0
        -:   11:# define true  1
        -:   12:# define NULL 0
        -:   13:
        -:   14:# define MAXSTR 100
        -:   15:# define MAXPAT MAXSTR
        -:   16:
        -:   17:# define ENDSTR  '\0'
        -:   18:# define ESCAPE  '@'
        -:   19:# define CLOSURE '*'
        -:   20:# define BOL     '%'
        -:   21:# define EOL     '$'
        -:   22:# define ANY     '?'
        -:   23:# define CCL     '['
        -:   24:# define CCLEND  ']'
        -:   25:# define NEGATE  '^'
        -:   26:# define NCCL    '!'
        -:   27:# define LITCHAR 'c'
        -:   28:# define DITTO   -1
        -:   29:# define DASH    '-'
        -:   30:
        -:   31:# define TAB     9
        -:   32:# define NEWLINE 10
        -:   33:
        -:   34:# define CLOSIZE 1
        -:   35:FILE* file_name = NULL;
        -:   36:
        -:   37:// Signal handler for SIGSEGV 
        -:   38:// add by mshadow
    #####:   39:void segfault_handler(int sig) {
    #####:   40:    exit(sig);  // Exit the program
        -:   41:}
        -:   42:
        -:   43:
        -:   44:typedef char	character;
        -:   45:typedef char string[MAXSTR];
        -:   46:
        -:   47:bool
    14799:   48:get_line(s, maxsize)
        -:   49:char *s;
        -:   50:int	maxsize;
        -:   51:{
    14799:   52:	fprintf(file_name,"P11,");
        -:   53:    char *result;
    14799:   54:    result = fgets(s, maxsize, stdin);
    14799:   55:    return (result != NULL);
        -:   56:}
        -:   57:
        -:   58:int
   186040:   59:addstr(c, outset, j, maxset)
        -:   60:char c;
        -:   61:char *outset;
        -:   62:int	*j;
        -:   63:int	maxset;
        -:   64:{
        -:   65:    bool result;
   186040:   66:	fprintf(file_name,"P12,");
   186040:   67:    if (*j >= maxset)
        -:   68:	{
    45992:   69:		fprintf(file_name,"P13,");
    45992:   70:		result = false;
        -:   71:	}
        -:   72:    else 
        -:   73:	{
   140048:   74:		fprintf(file_name,"P14,");
   140048:   75:		outset[*j] = c;
   140048:   76:		*j = *j + 1;
   140048:   77:		result = true;
        -:   78:    }
   186040:   79:	fprintf(file_name,"P15,");
   186040:   80:    return result;
        -:   81:}
        -:   82:
        -:   83:char
    75119:   84:esc(s, i)
        -:   85:char *s;
        -:   86:int	*i;
        -:   87:{
        -:   88:    char result;
    75119:   89:	fprintf(file_name,"P16,");
    75119:   90:    if (s[*i] != ESCAPE)
        -:   91:	{
    69922:   92:		fprintf(file_name,"P17,");
    69922:   93:		result = s[*i];
        -:   94:	}
     5197:   95:    else if (s[*i + 1] == ENDSTR)
        -:   96:	{
       53:   97:		fprintf(file_name,"P18,");
       53:   98:		result = ESCAPE;
        -:   99:	}
        -:  100:	else 
        -:  101:	{
     5144:  102:	    *i = *i + 1;
     5144:  103:	    fprintf(file_name,"P19,");
     5144:  104:		if (s[*i] == 'n')
        -:  105:		{
     1001:  106:			fprintf(file_name,"P20,");
     1001:  107:			result = NEWLINE;
        -:  108:		}
     4143:  109:	    else if (s[*i] == 't')
        -:  110:		{
      879:  111:			fprintf(file_name,"P21,");
      879:  112:			result = TAB;
        -:  113:		}
        -:  114:		else
        -:  115:		{
     3264:  116:			fprintf(file_name,"P22,");
     3264:  117:			result = s[*i];
        -:  118:		}  
        -:  119:	}
    75119:  120:	fprintf(file_name,"P23,");
    75119:  121:    return result;
        -:  122:}
        -:  123:
        -:  124:void change();
        -:  125:
        -:  126:void
     6360:  127:dodash(delim, src, i, dest, j, maxset)
        -:  128:char delim;
        -:  129:char *src;
        -:  130:int	*i;
        -:  131:char *dest;
        -:  132:int	*j;
        -:  133:int	maxset;
        -:  134:{
        -:  135:    int	k;
        -:  136:    bool junk;
        -:  137:    char escjunk;
     6360:  138:	fprintf(file_name,"P24,");
    27393:  139:    while ((src[*i] != delim) && (src[*i] != ENDSTR)) 
        -:  140:    {
    21033:  141:		fprintf(file_name,"P25,");
    21033:  142:		if (src[*i - 1] == ESCAPE) 
        -:  143:		{
      566:  144:			fprintf(file_name,"P26,");
      566:  145:			escjunk = esc(src, i);
      566:  146:			junk = addstr(escjunk, dest, j, maxset);
        -:  147:		} 
    20467:  148:		else if (src[*i] != DASH)
        -:  149:		{
    13806:  150:			fprintf(file_name,"P27,");
    13806:  151:			junk = addstr(src[*i], dest, j, maxset);
        -:  152:		}
     6661:  153:		else if (*j <= 1 || src[*i + 1] == ENDSTR)
        -:  154:		{
       96:  155:			fprintf(file_name,"P28,");
       96:  156:			junk = addstr(DASH, dest, j, maxset);
        -:  157:		}
     6565:  158:		else if ((isalnum(src[*i - 1])) && (isalnum(src[*i + 1])) && (src[*i - 1] <= src[*i + 1]))
        -:  159:		{
     4825:  160:			fprintf(file_name,"P29,");
    39699:  161:			for (k = src[*i-1]+1; k<=src[*i+1]; k++) 
        -:  162:			{
    34874:  163:				fprintf(file_name,"P30,");
    34874:  164:				junk = addstr(k, dest, j, maxset);
        -:  165:			}
     4825:  166:			fprintf(file_name,"P31,");	
     4825:  167:			*i = *i + 1;	
        -:  168:		} 
        -:  169:		else
        -:  170:		{
     1740:  171:			fprintf(file_name,"P32,");
     1740:  172:			junk = addstr(DASH, dest, j, maxset);
        -:  173:		}	
    21033:  174:		fprintf(file_name,"P33,");
    21033:  175:		(*i) = (*i) + 1;
        -:  176:    }
     6360:  177:}
        -:  178:
        -:  179:bool
     6360:  180:getccl(arg, i, pat, j)
        -:  181:char *arg;
        -:  182:int	*i;
        -:  183:char *pat;
        -:  184:int	*j;
        -:  185:{
        -:  186:    int	jstart;
        -:  187:    bool junk;
        -:  188:
     6360:  189:	fprintf(file_name,"P34,");
     6360:  190:    if (arg[*i + 1] == NEGATE)
        -:  191:	{
     3053:  192:		fprintf(file_name,"P35,");
     3053:  193:		junk = addstr(NCCL, pat, j, MAXPAT);
        -:  194:    } 
        -:  195:	else
        -:  196:	{
     3307:  197:		fprintf(file_name,"P36,");
     3307:  198:		junk = addstr(CCL, pat, j, MAXPAT);
        -:  199:	}
     6360:  200:    *i = *i + 1;
     6360:  201:	fprintf(file_name,"P37,");
     6360:  202:    jstart = *j;
     6360:  203:    junk = addstr(0, pat, j, MAXPAT);
     6360:  204:    dodash(CCLEND, arg, i, pat, j, MAXPAT);
     6360:  205:    pat[jstart] = *j - jstart - 1;
     6360:  206:    return (arg[*i] == CCLEND);
        -:  207:}
        -:  208:
        -:  209:void
     1968:  210:stclose(pat, j, lastj)
        -:  211:char *pat;
        -:  212:int	*j;
        -:  213:int	lastj;
        -:  214:{
        -:  215:    int	jt;
        -:  216:    int	jp;
        -:  217:    bool junk;
     1968:  218:	fprintf(file_name,"P38,");
     7152:  219:    for (jp = *j - 1; jp >= lastj ; jp--) 
        -:  220:    {
     5184:  221:		fprintf(file_name,"P39,");
     5184:  222:		jt = jp + CLOSIZE;
     5184:  223:		junk = addstr(pat[jp], pat, &jt, MAXPAT);
        -:  224:    }
     1968:  225:	fprintf(file_name,"P40,");
     1968:  226:    *j = *j + CLOSIZE;
     1968:  227:    pat[lastj] = CLOSURE;
     1968:  228:}
        -:  229:
     2048:  230:bool in_set_2(c)
        -:  231:char c;
        -:  232:{
     2048:  233:	fprintf(file_name,"P41,");
     2048:  234:  	return (c == BOL || c == EOL || c == CLOSURE);
        -:  235:}      
        -:  236:
   302861:  237:bool in_pat_set(c)
        -:  238:char c;
        -:  239:{
   302861:  240:	fprintf(file_name,"P42,");
  302861*:  241:  	return (c == LITCHAR || c == BOL || c == EOL || c == ANY || c == CCL || c == NCCL || c == CLOSURE);
        -:  242:}      
        -:  243:
        -:  244:int
     5520:  245:makepat(arg, start, delim, pat)
        -:  246:char	*arg;
        -:  247:int	start;
        -:  248:char	delim;
        -:  249:char	*pat;
        -:  250:{
        -:  251:    int	result;
        -:  252:    int	i, j, lastj, lj;
        -:  253:    bool done, junk;
        -:  254:    bool getres;
        -:  255:    char escjunk;
        -:  256:
     5520:  257:    j = 0;
     5520:  258:    i = start;
     5520:  259:    lastj = 0;
     5520:  260:    done = false;
     5520:  261:	fprintf(file_name,"P43,");
    44034:  262:    while ((!done) && (arg[i] != delim) && (arg[i] != ENDSTR)) 
        -:  263:	{
    38514:  264:		lj = j;
    38514:  265:		fprintf(file_name,"P44,");
    38514:  266:		if ((arg[i] == ANY))
        -:  267:		{
     3447:  268:			fprintf(file_name,"P45,");
     3447:  269:			junk = addstr(ANY, pat, &j, MAXPAT);
        -:  270:		}
    35067:  271:		else if ((arg[i] == BOL) && (i == start))
        -:  272:		{
      387:  273:			fprintf(file_name,"P46,");
      387:  274:			junk = addstr(BOL, pat, &j, MAXPAT);
        -:  275:		}
    34680:  276:		else if ((arg[i] == EOL) && (arg[i+1] == delim))
        -:  277:		{
      410:  278:			fprintf(file_name,"P47,");
      410:  279:			junk = addstr(EOL, pat, &j, MAXPAT);
        -:  280:		}
    34270:  281:		else if ((arg[i] == CCL)) 
        -:  282:		{
     6360:  283:			fprintf(file_name,"P48,");
     6360:  284:			getres = getccl(arg, &i, pat, &j);
     6360:  285:			done = (bool)(getres == false);
        -:  286:		} 
    27910:  287:		else if ((arg[i] == CLOSURE) && (i > start)) 
        -:  288:		{
     2048:  289:			fprintf(file_name,"P49,");
     2048:  290:			lj = lastj;
     2048:  291:			if (in_set_2(pat[lj]))
        -:  292:			{
       80:  293:				fprintf(file_name,"P50,");
       80:  294:				done = true;
        -:  295:			}	
        -:  296:			else
        -:  297:			{
     1968:  298:				fprintf(file_name,"P51,");
     1968:  299:				stclose(pat, &j, lastj);
        -:  300:			}
        -:  301:		} 
        -:  302:		else 
        -:  303:		{
    25862:  304:			fprintf(file_name,"P52,");
    25862:  305:			junk = addstr(LITCHAR, pat, &j, MAXPAT);
    25862:  306:			escjunk = esc(arg, &i);
    25862:  307:			junk = addstr(escjunk, pat, &j, MAXPAT);
        -:  308:		}
        -:  309:		
    38514:  310:		lastj = lj;
    38514:  311:		fprintf(file_name,"P53,");
    38514:  312:		if ((!done))
        -:  313:		{
    38110:  314:			fprintf(file_name,"P54,");
    38110:  315:			i = i + 1;
        -:  316:		}
        -:  317:    }	
     5520:  318:    junk = addstr(ENDSTR, pat, &j, MAXPAT);
     5520:  319:    fprintf(file_name,"P55,");
     5520:  320:	if ((done) || (arg[i] != delim))
        -:  321:	{
      404:  322:		fprintf(file_name,"P56,");
      404:  323:		result = 0;
        -:  324:	}
     5116:  325:    else if ((!junk))
        -:  326:	{
      106:  327:		fprintf(file_name,"P57,");
      106:  328:		result = 0;
        -:  329:	}
        -:  330:	else
        -:  331:	{
     5010:  332:		fprintf(file_name,"P58,");
     5010:  333:		result = i;
        -:  334:	}
     5520:  335:	fprintf(file_name,"P59,");
     5520:  336:    return result;
        -:  337:}
        -:  338:
        -:  339:int
     5520:  340:getpat(arg, pat)
        -:  341:char* arg;
        -:  342:char* pat;
        -:  343:{
     5520:  344:	fprintf(file_name,"P60,");
        -:  345:    int	makeres;
     5520:  346:    makeres = makepat(arg, 0, ENDSTR, pat);
     5520:  347:    return (makeres > 0);
        -:  348:}
        -:  349:
        -:  350:int
     4838:  351:makesub(arg, from, delim, sub)
        -:  352:char* arg;
        -:  353:int	from;
        -:  354:character delim;
        -:  355:char*	sub;
        -:  356:{
        -:  357:    int  result;
        -:  358:    int	i, j;
        -:  359:    bool	junk;
        -:  360:    character	escjunk;
        -:  361:
     4838:  362:    j = 0;
     4838:  363:    i = from;
        -:  364:
     4838:  365:	fprintf(file_name,"P61,");
    55566:  366:    while ((arg[i] != delim) && (arg[i] != ENDSTR)) 
        -:  367:	{
    50728:  368:		fprintf(file_name,"P62,");
    50728:  369:		if ((arg[i] == (unsigned)('&')))
        -:  370:		{
     2037:  371:			fprintf(file_name,"P63,");
     2037:  372:			junk = addstr(DITTO, sub, &j, MAXPAT);
        -:  373:		}
        -:  374:		else 
        -:  375:		{
    48691:  376:			fprintf(file_name,"P64,");
    48691:  377:			escjunk = esc(arg, &i);
    48691:  378:			junk = addstr(escjunk, sub, &j, MAXPAT);
        -:  379:		}
    50728:  380:		fprintf(file_name,"P65,");
    50728:  381:		i = i + 1;
        -:  382:    }
     4838:  383:	fprintf(file_name,"P66,");
     4838:  384:    if (arg[i] != delim)
        -:  385:	{
    #####:  386:		fprintf(file_name,"P67,");
    #####:  387:		result = 0;
        -:  388:	}
        -:  389:    else 
        -:  390:	{
     4838:  391:		junk = addstr(ENDSTR, &(*sub), &j, MAXPAT);
     4838:  392:		fprintf(file_name,"P68,");
     4838:  393:		if ((!junk))
        -:  394:		{
       62:  395:			fprintf(file_name,"P69,");
       62:  396:			result = 0;
        -:  397:		}
        -:  398:		else
        -:  399:		{
     4776:  400:			fprintf(file_name,"P70,");
     4776:  401:			result = i;
        -:  402:		}	
        -:  403:    }
     4838:  404:	fprintf(file_name,"P71,");	
     4838:  405:    return result;
        -:  406:}
        -:  407:
        -:  408:bool
     4838:  409:getsub(arg, sub)
        -:  410:char* arg;
        -:  411:char* sub;
        -:  412:{
     4838:  413:	fprintf(file_name,"P72,");
        -:  414:    int	makeres;
     4838:  415:    makeres = makesub(arg, 0, ENDSTR, sub);
     4838:  416:    return (makeres > 0);
        -:  417:}
        -:  418:
        -:  419:void subline();
        -:  420:
        -:  421:bool
    50605:  422:locate(c, pat, offset)
        -:  423:character c;
        -:  424:char* pat;
        -:  425:int	offset;
        -:  426:{
        -:  427:    int	i;
        -:  428:    bool flag;
    50605:  429:    flag = false;
    50605:  430:    i = offset + pat[offset];
        -:  431:
    50605:  432:    fprintf(file_name,"P73,");
   396561:  433:	while ((i > offset))
        -:  434:    {
   345956:  435:		fprintf(file_name,"P74,");
   345956:  436:		if (c == pat[i]) 
        -:  437:		{
    15238:  438:			fprintf(file_name,"P75,");
    15238:  439:			flag = true;
    15238:  440:			i = offset;
        -:  441:		} 
        -:  442:		else
        -:  443:		{
   330718:  444:			fprintf(file_name,"P76,");
   330718:  445:			i = i - 1;
        -:  446:		}
        -:  447:    }
        -:  448:
    50605:  449:	fprintf(file_name,"P77,");
    50605:  450:    return flag;
        -:  451:}
        -:  452:
        -:  453:bool
   203940:  454:omatch(lin, i, pat, j)
        -:  455:char* lin;
        -:  456:int	*i;
        -:  457:char* pat;
        -:  458:int	j;
        -:  459:{
        -:  460:    char advance;
        -:  461:    bool result;
   203940:  462:    advance = -1;
        -:  463:
   203940:  464:	fprintf(file_name,"P78,");
   203940:  465:    if ((lin[*i] == ENDSTR))
        -:  466:	{
      365:  467:		fprintf(file_name,"P79,");
      365:  468:		result = false;
        -:  469:	}
        -:  470:    else 
        -:  471:    {
   203575:  472:		fprintf(file_name,"P80,");
   203575:  473:		if (!in_pat_set(pat[j]))
        -:  474:		{
    #####:  475:			fprintf(file_name,"P81,");
    #####:  476:			(void)fprintf(stdout, "in omatch: can't happen\n");
    #####:  477:			abort();	
        -:  478:		} 
        -:  479:		else
        -:  480:		{
   203575:  481:			fprintf(file_name,"P82,");
   203575:  482:			switch (pat[j]) 
        -:  483:			{			
   118352:  484:				case LITCHAR:
   118352:  485:					fprintf(file_name,"P83,");
   118352:  486:					if (lin[*i] == pat[j + 1])
        -:  487:					{
    25987:  488:						fprintf(file_name,"P84,");
    25987:  489:						advance = 1;
        -:  490:					}
   118352:  491:					fprintf(file_name,"P85,");
   118352:  492:					break ;	
     6345:  493:				case BOL:
     6345:  494:					fprintf(file_name,"P86,");
     6345:  495:					if (*i == 0)
        -:  496:					{
      695:  497:						fprintf(file_name,"P87,");
      695:  498:						advance = 0;
        -:  499:					}
     6345:  500:					fprintf(file_name,"P88,");
     6345:  501:					break ;
    22998:  502:				case ANY:
    22998:  503:				    fprintf(file_name,"P89,");
    22998:  504:					if (lin[*i] != NEWLINE)
        -:  505:					{
    21335:  506:						fprintf(file_name,"P90,");
    21335:  507:						advance = 1;
        -:  508:					}
    22998:  509:					fprintf(file_name,"P91,");
    22998:  510:					break ;
     4233:  511:				case EOL:
     4233:  512:				 	fprintf(file_name,"P92,");
     4233:  513:					if (lin[*i] == NEWLINE)
        -:  514:					{
      655:  515:						fprintf(file_name,"P93,");
      655:  516:						advance = 0;
        -:  517:					}
     4233:  518:					fprintf(file_name,"P94,");	
     4233:  519:					break ;
    34534:  520:				case CCL:
    34534:  521:					fprintf(file_name,"P95,");
    34534:  522:					if (locate(lin[*i], pat, j + 1))
        -:  523:					{
    13284:  524:						fprintf(file_name,"P96,");
    13284:  525:						advance = 1;
        -:  526:					}
    34534:  527:					fprintf(file_name,"P97,");
    34534:  528:					break ;
    17113:  529:				case NCCL:
    17113:  530:					fprintf(file_name,"P98,");
    17113:  531:					if ((lin[*i] != NEWLINE) && (!locate(lin[*i], pat, j+1)))
        -:  532:					{
    14117:  533:						fprintf(file_name,"P99,");
    14117:  534:						advance = 1;	
        -:  535:					}
    17113:  536:					fprintf(file_name,"P100,");
    17113:  537:					break;
    #####:  538:				default:
    #####:  539:					fprintf(file_name,"P101,");
    #####:  540:					Caseerror(pat[j]);
        -:  541:			};
        -:  542:		}	
        -:  543:    }
   203940:  544:    if ((advance >= 0)) 
        -:  545:    {
    76073:  546:		fprintf(file_name,"P102,");
    76073:  547:		*i = *i + advance;
    76073:  548:		result = true;
        -:  549:    } 
        -:  550:	else
        -:  551:	{
   127867:  552:		fprintf(file_name,"P103,");
   127867:  553:		result = false;
        -:  554:	}
   203940:  555:	fprintf(file_name,"P104,");
   203940:  556:    return result;
        -:  557:}
        -:  558:
        -:  559:
    99286:  560:patsize(pat, n)
        -:  561:char*	pat;
        -:  562:int	n;
        -:  563:{
        -:  564:    int size;
    99286:  565:	fprintf(file_name,"P105,");
    99286:  566:    if (!in_pat_set(pat[n])) 
        -:  567:	{
    #####:  568:		fprintf(file_name,"P106,");
    #####:  569:		(void)fprintf(stdout, "in patsize: can't happen\n");
    #####:  570:		abort();
        -:  571:    } 
        -:  572:	else
        -:  573:	{
    99286:  574:		fprintf(file_name,"P107,");
    99286:  575:		switch (pat[n]) 
        -:  576:		{
    33578:  577:		case LITCHAR: 
    33578:  578:			fprintf(file_name,"P108,");
    33578:  579:			size = 2; 
    33578:  580:			break;
        -:  581:			
    21186:  582:		case BOL:  
        -:  583:		case EOL:  
        -:  584:		case ANY:
    21186:  585:			fprintf(file_name,"P109,");
    21186:  586:			size = 1;
    21186:  587:			break;
    26521:  588:		case CCL:  
        -:  589:		case NCCL:
    26521:  590:			fprintf(file_name,"P110,");
    26521:  591:			size = pat[n + 1] + 2;
    26521:  592:			break ;
    18001:  593:		case CLOSURE:
    18001:  594:			fprintf(file_name,"P111,");
    18001:  595:			size = CLOSIZE;
    18001:  596:			break ;
    #####:  597:		default:
    #####:  598:			fprintf(file_name,"P112,");
    #####:  599:			Caseerror(pat[n]);
        -:  600:		}
        -:  601:	}
        -:  602:
    99286:  603:    return size;
        -:  604:}
        -:  605:
        -:  606:int
   158559:  607:amatch(lin, offset, pat, j)
        -:  608:char*	lin;
        -:  609:int	offset;
        -:  610:char*	pat;
        -:  611:int	j;
        -:  612:{
        -:  613:    int	i, k;
        -:  614:    bool result, done;
   158559:  615:    done = false;
        -:  616:
   158559:  617:	fprintf(file_name,"P113,");
   343482:  618:    while ((!done) && (pat[j] != ENDSTR))
        -:  619:	{
   184923:  620:		fprintf(file_name,"P114,");
   184923:  621:		if ((pat[j] == CLOSURE)) 
        -:  622:		{
    18001:  623:			j = j + patsize(pat, j);
    18001:  624:			i = offset;
    18001:  625:			fprintf(file_name,"P115,");
    55019:  626:			while ((!done) && (lin[i] != ENDSTR)) 
        -:  627:			{
    37018:  628:				result = omatch(lin, &i, pat, j);
    37018:  629:				fprintf(file_name,"P115,");
    37018:  630:				if (!result)
        -:  631:				{
    17773:  632:					fprintf(file_name,"P117,");
    17773:  633:					done = true;
        -:  634:				}		
        -:  635:			}
    18001:  636:			done = false;
    18001:  637:			fprintf(file_name,"P118,");
    42458:  638:			while ((!done) && (i >= offset)) 
        -:  639:			{
    24457:  640:				k = amatch(lin, i, pat, j + patsize(pat, j));
    24457:  641:				fprintf(file_name,"P119,");
    24457:  642:				if ((k >= 0))
        -:  643:				{
    11116:  644:					fprintf(file_name,"P120,");
    11116:  645:					done = true;
        -:  646:				}
        -:  647:				else
        -:  648:				{
    13341:  649:					fprintf(file_name,"P121,");
    13341:  650:					i = i - 1;
        -:  651:				}	
        -:  652:			}
    18001:  653:			fprintf(file_name,"P122,");
    18001:  654:			offset = k;
    18001:  655:			done = true;
        -:  656:		} 
        -:  657:		else 
        -:  658:		{
   166922:  659:			result = omatch(lin, &offset, pat, j);
   166922:  660:			fprintf(file_name,"P123,");
   166922:  661:			if ((!result)) 
        -:  662:			{
   110094:  663:				fprintf(file_name,"P124,");
   110094:  664:				offset = -1;
   110094:  665:				done = true;
        -:  666:			}
        -:  667:			else
        -:  668:			{
    56828:  669:				fprintf(file_name,"P125,");
    56828:  670:				j = j + patsize(pat, j);
        -:  671:			}
        -:  672:		}
        -:  673:	}
   158559:  674:	fprintf(file_name,"P126,");
   158559:  675:	return offset;
        -:  676:}
        -:  677:
        -:  678:void
    29762:  679:putsub(lin, s1, s2, sub)
        -:  680:char* lin;
        -:  681:int	s1, s2;
        -:  682:char* sub;
        -:  683:{
        -:  684:    int	i;
        -:  685:    int	j;
    29762:  686:    i = 0;
    29762:  687:	fprintf(file_name,"P127,");
   389236:  688:    while ((sub[i] != ENDSTR)) 
        -:  689:	{
   359474:  690:		fprintf(file_name,"P128,");
   359474:  691:		if ((sub[i] == DITTO))
        -:  692:		{
    25808:  693:			fprintf(file_name,"P129,");
    59182:  694:			for (j = s1; j < s2; j++) 
        -:  695:		    {
    33374:  696:				fprintf(file_name,"P130,");
    33374:  697:				fputc(lin[j],stdout);
        -:  698:		    }
        -:  699:		}
        -:  700:		else	
        -:  701:		{
   333666:  702:			fprintf(file_name,"P131,");
   333666:  703:		    fputc(sub[i],stdout);
        -:  704:		}
   359474:  705:		fprintf(file_name,"P132,");
   359474:  706:		i = i + 1;
        -:  707:    }
    29762:  708:}
        -:  709:
        -:  710:void
    10141:  711:subline(lin, pat, sub)
        -:  712:char *lin;
        -:  713:char *pat;
        -:  714:char *sub;
        -:  715:{	
        -:  716:	int	i, lastm, m;
    10141:  717:	lastm = -1;
    10141:  718:	i = 0;
    10141:  719:	fprintf(file_name,"P133,");
   144243:  720:	while ((lin[i] != ENDSTR)) 
        -:  721:	{
   134102:  722:	    m = amatch(lin, i, pat, 0);
   134102:  723:	    fprintf(file_name,"P134,");
   134102:  724:		if ((m >= 0) && (lastm != m)) 
        -:  725:		{
    29762:  726:			fprintf(file_name,"P135,");
    29762:  727:			putsub(lin, i, m, sub);
    29762:  728:			lastm = m;
        -:  729:	    }
   134102:  730:		fprintf(file_name,"P136,");
   134102:  731:	    if ((m == -1) || (m == i))
        -:  732:		{
   111392:  733:			fprintf(file_name,"P137,");
   111392:  734:			fputc(lin[i],stdout);
   111392:  735:			i = i + 1;
        -:  736:	    } 
        -:  737:		else
        -:  738:		{
    22710:  739:			fprintf(file_name,"P138,");
    22710:  740:			i = m;
        -:  741:		}
        -:  742:	}
    10141:  743:}
        -:  744:
        -:  745:void
     4658:  746:change(pat, sub)
        -:  747:char *pat, *sub;
        -:  748:{
        -:  749:    string  line;
        -:  750:    bool result;
     4658:  751:    result = get_line(line, MAXSTR);
        -:  752:	
     4658:  753:    fprintf(file_name,"P139,");
    14799:  754:	while ((result)) 
        -:  755:	{
    10141:  756:		fprintf(file_name,"P140,");
    10141:  757:		subline(line, pat, sub);
    10141:  758:		result = get_line(line, MAXSTR);
        -:  759:    }
     4658:  760:}
        -:  761:
     5542:  762:main(argc, argv)
        -:  763:int	argc;
        -:  764:char	*argv[];
        -:  765:{
     5542:  766:	signal(SIGSEGV, segfault_handler);
     5542:  767:	file_name=fopen("v22.txt","a+"); 
     5542:  768:    if(!file_name)
        -:  769:    {	
    #####:  770:        printf("File could not be opened! \n");
    #####:  771:        fclose(file_name);
    #####:  772:        exit(0);
        -:  773:    }
        -:  774:	string pat, sub;
        -:  775:	bool result;
        -:  776:
     5542:  777:	fprintf(file_name,"\nP1,");
     5542:  778:	if (argc < 2) 
        -:  779:	{
       22:  780:		fprintf(file_name,"P2,");
       22:  781:		(void)fprintf(stdout, "usage: change from [to]\n");
       22:  782:		exit(1);
        -:  783:	};
        -:  784:	
     5520:  785:	result = getpat(argv[1], pat);
     5520:  786:	fprintf(file_name,"P3,");
     5520:  787:	if (!result)
        -:  788:	{
      570:  789:		fprintf(file_name,"P4,");
      570:  790:		(void)fprintf(stdout, "change: illegal \"from\" pattern\n");
      570:  791:		exit(2);
        -:  792:	}
        -:  793:
     4950:  794:	fprintf(file_name,"P5,");
     4950:  795:	if (argc >= 3)
        -:  796:	{
     4838:  797:		result = getsub(argv[2], sub);
     4838:  798:		fprintf(file_name,"P6,");
     4838:  799:		if (!result)
        -:  800:		{	
      292:  801:			fprintf(file_name,"P7,");
      292:  802:			(void)fprintf(stdout, "change: illegal \"to\" string\n");
      292:  803:			exit(3);
        -:  804:		}
        -:  805:	} 
        -:  806:	else
        -:  807:	{
      112:  808:		fprintf(file_name,"P8,");
      112:  809:		sub[0] = '\0';
        -:  810:	}
        -:  811:
     4658:  812:	fprintf(file_name,"P9,");
     4658:  813:	change(pat, sub);
     4658:  814:	return 0;
        -:  815:}
        -:  816:
        -:  817:void
    #####:  818:Caseerror(n)
        -:  819:int	n;
        -:  820:{
    #####:  821:	fprintf(file_name,"P10,");
    #####:  822:	(void)fprintf(stdout, "Missing case limb: line %d\n", n);
    #####:  823:	exit(4);
        -:  824:}
