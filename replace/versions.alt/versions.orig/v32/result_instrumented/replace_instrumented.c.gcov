        -:    0:Source:replace_instrumented.c
        -:    0:Graph:replace_instrumented.gcno
        -:    0:Data:replace_instrumented.gcda
        -:    0:Runs:5542
        -:    1:/*  -*- Last-Edit:  Mon Dec  7 10:31:51 1992 by Tarak S. Goradia; -*- */
        -:    2:
        -:    3:extern void	exit();
        -:    4:# include <stdio.h>
        -:    5:
        -:    6:void	Caseerror();
        -:    7:
        -:    8:typedef char	bool;
        -:    9:# define false 0
        -:   10:# define true  1
        -:   11:# define NULL 0
        -:   12:
        -:   13:# define MAXSTR 100
        -:   14:# define MAXPAT MAXSTR
        -:   15:
        -:   16:# define ENDSTR  '\0'
        -:   17:# define ESCAPE  '@'
        -:   18:# define CLOSURE '*'
        -:   19:# define BOL     '%'
        -:   20:# define EOL     '$'
        -:   21:# define ANY     '?'
        -:   22:# define CCL     '['
        -:   23:# define CCLEND  ']'
        -:   24:# define NEGATE  '^'
        -:   25:# define NCCL    '!'
        -:   26:# define LITCHAR 'c'
        -:   27:# define DITTO   -1
        -:   28:# define DASH    '-'
        -:   29:
        -:   30:# define TAB     9
        -:   31:# define NEWLINE 10
        -:   32:
        -:   33:# define CLOSIZE 1
        -:   34:FILE* file_name = NULL;
        -:   35:
        -:   36:typedef char	character;
        -:   37:typedef char string[MAXSTR];
        -:   38:
        -:   39:bool
    14799:   40:get_line(s, maxsize)
        -:   41:char *s;
        -:   42:int	maxsize;
        -:   43:{
    14799:   44:	fprintf(file_name,"P11,");
        -:   45:    char *result;
    14799:   46:    result = fgets(s, maxsize, stdin);
    14799:   47:    return (result != NULL);
        -:   48:}
        -:   49:
        -:   50:int
   182913:   51:addstr(c, outset, j, maxset)
        -:   52:char c;
        -:   53:char *outset;
        -:   54:int	*j;
        -:   55:int	maxset;
        -:   56:{
        -:   57:    bool result;
   182913:   58:	fprintf(file_name,"P12,");
   182913:   59:    if (*j >= maxset)
        -:   60:	{
    45218:   61:		fprintf(file_name,"P13,");
    45218:   62:		result = false;
        -:   63:	}
        -:   64:    else 
        -:   65:	{
   137695:   66:		fprintf(file_name,"P14,");
   137695:   67:		outset[*j] = c;
   137695:   68:		*j = *j + 1;
   137695:   69:		result = true;
        -:   70:    }
   182913:   71:	fprintf(file_name,"P15,");
   182913:   72:    return result;
        -:   73:}
        -:   74:
        -:   75:char
    75119:   76:esc(s, i)
        -:   77:char *s;
        -:   78:int	*i;
        -:   79:{
        -:   80:    char result;
    75119:   81:	fprintf(file_name,"P16,");
    75119:   82:    if (s[*i] != ESCAPE)
        -:   83:	{
    69922:   84:		fprintf(file_name,"P17,");
    69922:   85:		result = s[*i];
        -:   86:	}
     5197:   87:    else if (s[*i + 1] == ENDSTR)
        -:   88:	{
       53:   89:		fprintf(file_name,"P18,");
       53:   90:		result = ESCAPE;
        -:   91:	}
        -:   92:	else 
        -:   93:	{
     5144:   94:	    *i = *i + 1;
     5144:   95:	    fprintf(file_name,"P19,");
     5144:   96:		if (s[*i] == 'n')
        -:   97:		{
     1001:   98:			fprintf(file_name,"P20,");
     1001:   99:			result = NEWLINE;
        -:  100:		}
     4143:  101:	    else if (s[*i] == 't')
        -:  102:		{
      879:  103:			fprintf(file_name,"P21,");
      879:  104:			result = TAB;
        -:  105:		}
        -:  106:		else
        -:  107:		{
     3264:  108:			fprintf(file_name,"P22,");
     3264:  109:			result = s[*i];
        -:  110:		}  
        -:  111:	}
    75119:  112:	fprintf(file_name,"P23,");
    75119:  113:    return result;
        -:  114:}
        -:  115:
        -:  116:void change();
        -:  117:
        -:  118:void
     6360:  119:dodash(delim, src, i, dest, j, maxset)
        -:  120:char delim;
        -:  121:char *src;
        -:  122:int	*i;
        -:  123:char *dest;
        -:  124:int	*j;
        -:  125:int	maxset;
        -:  126:{
        -:  127:    int	k;
        -:  128:    bool junk;
        -:  129:    char escjunk;
     6360:  130:	fprintf(file_name,"P24,");
    24340:  131:    while ((src[*i] != delim) && (src[*i] != ENDSTR)) 
        -:  132:    {
    17980:  133:		fprintf(file_name,"P25,");
    17980:  134:		if (src[*i - 1] == ESCAPE) 
        -:  135:		{
      566:  136:			fprintf(file_name,"P26,");
      566:  137:			escjunk = esc(src, i);
      566:  138:			junk = addstr(escjunk, dest, j, maxset);
        -:  139:		} 
    17414:  140:		else if (src[*i] != DASH)
        -:  141:		{
    10753:  142:			fprintf(file_name,"P27,");
    10753:  143:			junk = addstr(src[*i], dest, j, maxset);
        -:  144:		}
     6661:  145:		else if (*j <= 1 || src[*i + 1] == ENDSTR)
        -:  146:		{
       96:  147:			fprintf(file_name,"P28,");
       96:  148:			junk = addstr(DASH, dest, j, maxset);
        -:  149:		}
     6565:  150:	    else if ((isalnum(src[*i - 1])) & (isalnum(src[*i + 1]))
        -:  151:                    /*  Replaced logical AND with bitwise AND  */
     4939:  152:		&& (src[*i - 1] <= src[*i + 1]))
        -:  153:		{
     4825:  154:			fprintf(file_name,"P29,");
    39699:  155:			for (k = src[*i-1]+1; k<=src[*i+1]; k++) 
        -:  156:			{
    34874:  157:				fprintf(file_name,"P30,");
    34874:  158:				junk = addstr(k, dest, j, maxset);
        -:  159:			}
     4825:  160:			fprintf(file_name,"P31,");	
     4825:  161:			*i = *i + 1;	
        -:  162:		} 
        -:  163:		else
        -:  164:		{
     1740:  165:			fprintf(file_name,"P32,");
     1740:  166:			junk = addstr(DASH, dest, j, maxset);
        -:  167:		}	
    17980:  168:		fprintf(file_name,"P33,");
    17980:  169:		(*i) = (*i) + 1;
        -:  170:    }
     6360:  171:}
        -:  172:
        -:  173:bool
     6360:  174:getccl(arg, i, pat, j)
        -:  175:char *arg;
        -:  176:int	*i;
        -:  177:char *pat;
        -:  178:int	*j;
        -:  179:{
        -:  180:    int	jstart;
        -:  181:    bool junk;
     6360:  182:    *i = *i + 1;
     6360:  183:	fprintf(file_name,"P34,");
     6360:  184:    if (arg[*i] == NEGATE) 
        -:  185:	{
     3053:  186:		fprintf(file_name,"P35,");
     3053:  187:		junk = addstr(NCCL, pat, j, MAXPAT);
     3053:  188:		*i = *i + 1;
        -:  189:    } 
        -:  190:	else
        -:  191:	{
     3307:  192:		fprintf(file_name,"P36,");
     3307:  193:		junk = addstr(CCL, pat, j, MAXPAT);
        -:  194:	}
     6360:  195:	fprintf(file_name,"P37,");
     6360:  196:    jstart = *j;
     6360:  197:    junk = addstr(0, pat, j, MAXPAT);
     6360:  198:    dodash(CCLEND, arg, i, pat, j, MAXPAT);
     6360:  199:    pat[jstart] = *j - jstart - 1;
     6360:  200:    return (arg[*i] == CCLEND);
        -:  201:}
        -:  202:
        -:  203:void
     1968:  204:stclose(pat, j, lastj)
        -:  205:char *pat;
        -:  206:int	*j;
        -:  207:int	lastj;
        -:  208:{
        -:  209:    int	jt;
        -:  210:    int	jp;
        -:  211:    bool junk;
     1968:  212:	fprintf(file_name,"P38,");
     7078:  213:    for (jp = *j - 1; jp >= lastj ; jp--) 
        -:  214:    {
     5110:  215:		fprintf(file_name,"P39,");
     5110:  216:		jt = jp + CLOSIZE;
     5110:  217:		junk = addstr(pat[jp], pat, &jt, MAXPAT);
        -:  218:    }
     1968:  219:	fprintf(file_name,"P40,");
     1968:  220:    *j = *j + CLOSIZE;
     1968:  221:    pat[lastj] = CLOSURE;
     1968:  222:}
        -:  223:
     2048:  224:bool in_set_2(c)
        -:  225:char c;
        -:  226:{
     2048:  227:	fprintf(file_name,"P41,");
     2048:  228:  	return (c == BOL || c == EOL || c == CLOSURE);
        -:  229:}      
        -:  230:
   303013:  231:bool in_pat_set(c)
        -:  232:char c;
        -:  233:{
   303013:  234:	fprintf(file_name,"P42,");
  303013*:  235:  	return (c == LITCHAR || c == BOL || c == EOL || c == ANY || c == CCL || c == NCCL || c == CLOSURE);
        -:  236:}      
        -:  237:
        -:  238:int
     5520:  239:makepat(arg, start, delim, pat)
        -:  240:char	*arg;
        -:  241:int	start;
        -:  242:char	delim;
        -:  243:char	*pat;
        -:  244:{
        -:  245:    int	result;
        -:  246:    int	i, j, lastj, lj;
        -:  247:    bool done, junk;
        -:  248:    bool getres;
        -:  249:    char escjunk;
        -:  250:
     5520:  251:    j = 0;
     5520:  252:    i = start;
     5520:  253:    lastj = 0;
     5520:  254:    done = false;
     5520:  255:	fprintf(file_name,"P43,");
    44034:  256:    while ((!done) && (arg[i] != delim) && (arg[i] != ENDSTR)) 
        -:  257:	{
    38514:  258:		lj = j;
    38514:  259:		fprintf(file_name,"P44,");
    38514:  260:		if ((arg[i] == ANY))
        -:  261:		{
     3447:  262:			fprintf(file_name,"P45,");
     3447:  263:			junk = addstr(ANY, pat, &j, MAXPAT);
        -:  264:		}
    35067:  265:		else if ((arg[i] == BOL) && (i == start))
        -:  266:		{
      387:  267:			fprintf(file_name,"P46,");
      387:  268:			junk = addstr(BOL, pat, &j, MAXPAT);
        -:  269:		}
    34680:  270:		else if ((arg[i] == EOL) && (arg[i+1] == delim))
        -:  271:		{
      410:  272:			fprintf(file_name,"P47,");
      410:  273:			junk = addstr(EOL, pat, &j, MAXPAT);
        -:  274:		}
    34270:  275:		else if ((arg[i] == CCL)) 
        -:  276:		{
     6360:  277:			fprintf(file_name,"P48,");
     6360:  278:			getres = getccl(arg, &i, pat, &j);
     6360:  279:			done = (bool)(getres == false);
        -:  280:		} 
    27910:  281:		else if ((arg[i] == CLOSURE) && (i > start)) 
        -:  282:		{
     2048:  283:			fprintf(file_name,"P49,");
     2048:  284:			lj = lastj;
     2048:  285:			if (in_set_2(pat[lj]))
        -:  286:			{
       80:  287:				fprintf(file_name,"P50,");
       80:  288:				done = true;
        -:  289:			}	
        -:  290:			else
        -:  291:			{
     1968:  292:				fprintf(file_name,"P51,");
     1968:  293:				stclose(pat, &j, lastj);
        -:  294:			}
        -:  295:		} 
        -:  296:		else 
        -:  297:		{
    25862:  298:			fprintf(file_name,"P52,");
    25862:  299:			junk = addstr(LITCHAR, pat, &j, MAXPAT);
    25862:  300:			escjunk = esc(arg, &i);
    25862:  301:			junk = addstr(escjunk, pat, &j, MAXPAT);
        -:  302:		}
        -:  303:		
    38514:  304:		lastj = lj;
    38514:  305:		fprintf(file_name,"P53,");
    38514:  306:		if ((!done))
        -:  307:		{
    38110:  308:			fprintf(file_name,"P54,");
    38110:  309:			i = i + 1;
        -:  310:		}
        -:  311:    }	
     5520:  312:    junk = addstr(ENDSTR, pat, &j, MAXPAT);
     5520:  313:    fprintf(file_name,"P55,");
     5520:  314:	if ((done) || (arg[i] != delim))
        -:  315:	{
      404:  316:		fprintf(file_name,"P56,");
      404:  317:		result = 0;
        -:  318:	}
     5116:  319:    else if ((!junk))
        -:  320:	{
      106:  321:		fprintf(file_name,"P57,");
      106:  322:		result = 0;
        -:  323:	}
        -:  324:	else
        -:  325:	{
     5010:  326:		fprintf(file_name,"P58,");
     5010:  327:		result = i;
        -:  328:	}
     5520:  329:	fprintf(file_name,"P59,");
     5520:  330:    return result;
        -:  331:}
        -:  332:
        -:  333:int
     5520:  334:getpat(arg, pat)
        -:  335:char* arg;
        -:  336:char* pat;
        -:  337:{
     5520:  338:	fprintf(file_name,"P60,");
        -:  339:    int	makeres;
     5520:  340:    makeres = makepat(arg, 0, ENDSTR, pat);
     5520:  341:    return (makeres > 0);
        -:  342:}
        -:  343:
        -:  344:int
     4838:  345:makesub(arg, from, delim, sub)
        -:  346:char* arg;
        -:  347:int	from;
        -:  348:character delim;
        -:  349:char*	sub;
        -:  350:{
        -:  351:    int  result;
        -:  352:    int	i, j;
        -:  353:    bool	junk;
        -:  354:    character	escjunk;
        -:  355:
     4838:  356:    j = 0;
     4838:  357:    i = from;
        -:  358:
     4838:  359:	fprintf(file_name,"P61,");
    55566:  360:    while ((arg[i] != delim) && (arg[i] != ENDSTR)) 
        -:  361:	{
    50728:  362:		fprintf(file_name,"P62,");
    50728:  363:		if ((arg[i] == (unsigned)('&')))
        -:  364:		{
     2037:  365:			fprintf(file_name,"P63,");
     2037:  366:			junk = addstr(DITTO, sub, &j, MAXPAT);
        -:  367:		}
        -:  368:		else 
        -:  369:		{
    48691:  370:			fprintf(file_name,"P64,");
    48691:  371:			escjunk = esc(arg, &i);
    48691:  372:			junk = addstr(escjunk, sub, &j, MAXPAT);
        -:  373:		}
    50728:  374:		fprintf(file_name,"P65,");
    50728:  375:		i = i + 1;
        -:  376:    }
     4838:  377:	fprintf(file_name,"P66,");
     4838:  378:    if (arg[i] != delim)
        -:  379:	{
    #####:  380:		fprintf(file_name,"P67,");
    #####:  381:		result = 0;
        -:  382:	}
        -:  383:    else 
        -:  384:	{
     4838:  385:		junk = addstr(ENDSTR, &(*sub), &j, MAXPAT);
     4838:  386:		fprintf(file_name,"P68,");
     4838:  387:		if ((!junk))
        -:  388:		{
       62:  389:			fprintf(file_name,"P69,");
       62:  390:			result = 0;
        -:  391:		}
        -:  392:		else
        -:  393:		{
     4776:  394:			fprintf(file_name,"P70,");
     4776:  395:			result = i;
        -:  396:		}	
        -:  397:    }
     4838:  398:	fprintf(file_name,"P71,");	
     4838:  399:    return result;
        -:  400:}
        -:  401:
        -:  402:bool
     4838:  403:getsub(arg, sub)
        -:  404:char* arg;
        -:  405:char* sub;
        -:  406:{
     4838:  407:	fprintf(file_name,"P72,");
        -:  408:    int	makeres;
     4838:  409:    makeres = makesub(arg, 0, ENDSTR, sub);
     4838:  410:    return (makeres > 0);
        -:  411:}
        -:  412:
        -:  413:void subline();
        -:  414:
        -:  415:bool
    50612:  416:locate(c, pat, offset)
        -:  417:character c;
        -:  418:char* pat;
        -:  419:int	offset;
        -:  420:{
        -:  421:    int	i;
        -:  422:    bool flag;
    50612:  423:    flag = false;
    50612:  424:    i = offset + pat[offset];
        -:  425:
    50612:  426:    fprintf(file_name,"P73,");
   382403:  427:	while ((i > offset))
        -:  428:    {
   331791:  429:		fprintf(file_name,"P74,");
   331791:  430:		if (c == pat[i]) 
        -:  431:		{
    15143:  432:			fprintf(file_name,"P75,");
    15143:  433:			flag = true;
    15143:  434:			i = offset;
        -:  435:		} 
        -:  436:		else
        -:  437:		{
   316648:  438:			fprintf(file_name,"P76,");
   316648:  439:			i = i - 1;
        -:  440:		}
        -:  441:    }
        -:  442:
    50612:  443:	fprintf(file_name,"P77,");
    50612:  444:    return flag;
        -:  445:}
        -:  446:
        -:  447:bool
   203996:  448:omatch(lin, i, pat, j)
        -:  449:char* lin;
        -:  450:int	*i;
        -:  451:char* pat;
        -:  452:int	j;
        -:  453:{
        -:  454:    char advance;
        -:  455:    bool result;
   203996:  456:    advance = -1;
        -:  457:
   203996:  458:	fprintf(file_name,"P78,");
   203996:  459:    if ((lin[*i] == ENDSTR))
        -:  460:	{
      366:  461:		fprintf(file_name,"P79,");
      366:  462:		result = false;
        -:  463:	}
        -:  464:    else 
        -:  465:    {
   203630:  466:		fprintf(file_name,"P80,");
   203630:  467:		if (!in_pat_set(pat[j]))
        -:  468:		{
    #####:  469:			fprintf(file_name,"P81,");
    #####:  470:			(void)fprintf(stdout, "in omatch: can't happen\n");
    #####:  471:			abort();	
        -:  472:		} 
        -:  473:		else
        -:  474:		{
   203630:  475:			fprintf(file_name,"P82,");
   203630:  476:			switch (pat[j]) 
        -:  477:			{			
   118409:  478:				case LITCHAR:
   118409:  479:					fprintf(file_name,"P83,");
   118409:  480:					if (lin[*i] == pat[j + 1])
        -:  481:					{
    25984:  482:						fprintf(file_name,"P84,");
    25984:  483:						advance = 1;
        -:  484:					}
   118409:  485:					fprintf(file_name,"P85,");
   118409:  486:					break ;	
     6345:  487:				case BOL:
     6345:  488:					fprintf(file_name,"P86,");
     6345:  489:					if (*i == 0)
        -:  490:					{
      695:  491:						fprintf(file_name,"P87,");
      695:  492:						advance = 0;
        -:  493:					}
     6345:  494:					fprintf(file_name,"P88,");
     6345:  495:					break ;
    22999:  496:				case ANY:
    22999:  497:				    fprintf(file_name,"P89,");
    22999:  498:					if (lin[*i] != NEWLINE)
        -:  499:					{
    21336:  500:						fprintf(file_name,"P90,");
    21336:  501:						advance = 1;
        -:  502:					}
    22999:  503:					fprintf(file_name,"P91,");
    22999:  504:					break ;
     4223:  505:				case EOL:
     4223:  506:				 	fprintf(file_name,"P92,");
     4223:  507:					if (lin[*i] == NEWLINE)
        -:  508:					{
      655:  509:						fprintf(file_name,"P93,");
      655:  510:						advance = 0;
        -:  511:					}
     4223:  512:					fprintf(file_name,"P94,");	
     4223:  513:					break ;
    34534:  514:				case CCL:
    34534:  515:					fprintf(file_name,"P95,");
    34534:  516:					if (locate(lin[*i], pat, j + 1))
        -:  517:					{
    13284:  518:						fprintf(file_name,"P96,");
    13284:  519:						advance = 1;
        -:  520:					}
    34534:  521:					fprintf(file_name,"P97,");
    34534:  522:					break ;
    17120:  523:				case NCCL:
    17120:  524:					fprintf(file_name,"P98,");
    17120:  525:					if ((lin[*i] != NEWLINE) && (!locate(lin[*i], pat, j+1)))
        -:  526:					{
    14219:  527:						fprintf(file_name,"P99,");
    14219:  528:						advance = 1;	
        -:  529:					}
    17120:  530:					fprintf(file_name,"P100,");
    17120:  531:					break;
    #####:  532:				default:
    #####:  533:					fprintf(file_name,"P101,");
    #####:  534:					Caseerror(pat[j]);
        -:  535:			};
        -:  536:		}	
        -:  537:    }
   203996:  538:    if ((advance >= 0)) 
        -:  539:    {
    76173:  540:		fprintf(file_name,"P102,");
    76173:  541:		*i = *i + advance;
    76173:  542:		result = true;
        -:  543:    } 
        -:  544:	else
        -:  545:	{
   127823:  546:		fprintf(file_name,"P103,");
   127823:  547:		result = false;
        -:  548:	}
   203996:  549:	fprintf(file_name,"P104,");
   203996:  550:    return result;
        -:  551:}
        -:  552:
        -:  553:
    99383:  554:patsize(pat, n)
        -:  555:char*	pat;
        -:  556:int	n;
        -:  557:{
        -:  558:    int size;
    99383:  559:	fprintf(file_name,"P105,");
    99383:  560:    if (!in_pat_set(pat[n])) 
        -:  561:	{
    #####:  562:		fprintf(file_name,"P106,");
    #####:  563:		(void)fprintf(stdout, "in patsize: can't happen\n");
    #####:  564:		abort();
        -:  565:    } 
        -:  566:	else
        -:  567:	{
    99383:  568:		fprintf(file_name,"P107,");
    99383:  569:		switch (pat[n]) 
        -:  570:		{
    33583:  571:		case LITCHAR: 
    33583:  572:			fprintf(file_name,"P108,");
    33583:  573:			size = 2; 
    33583:  574:			break;
        -:  575:			
    21187:  576:		case BOL:  
        -:  577:		case EOL:  
        -:  578:		case ANY:
    21187:  579:			fprintf(file_name,"P109,");
    21187:  580:			size = 1;
    21187:  581:			break;
    26606:  582:		case CCL:  
        -:  583:		case NCCL:
    26606:  584:			fprintf(file_name,"P110,");
    26606:  585:			size = pat[n + 1] + 2;
    26606:  586:			break ;
    18007:  587:		case CLOSURE:
    18007:  588:			fprintf(file_name,"P111,");
    18007:  589:			size = CLOSIZE;
    18007:  590:			break ;
    #####:  591:		default:
    #####:  592:			fprintf(file_name,"P112,");
    #####:  593:			Caseerror(pat[n]);
        -:  594:		}
        -:  595:	}
        -:  596:
    99383:  597:    return size;
        -:  598:}
        -:  599:
        -:  600:int
   158542:  601:amatch(lin, offset, pat, j)
        -:  602:char*	lin;
        -:  603:int	offset;
        -:  604:char*	pat;
        -:  605:int	j;
        -:  606:{
        -:  607:    int	i, k;
        -:  608:    bool result, done;
   158542:  609:    done = false;
        -:  610:
   158542:  611:	fprintf(file_name,"P113,");
   343515:  612:    while ((!done) && (pat[j] != ENDSTR))
        -:  613:	{
   184973:  614:		fprintf(file_name,"P114,");
   184973:  615:		if ((pat[j] == CLOSURE)) 
        -:  616:		{
    18007:  617:			j = j + patsize(pat, j);
    18007:  618:			i = offset;
    18007:  619:			fprintf(file_name,"P115,");
    55037:  620:			while ((!done) && (lin[i] != ENDSTR)) 
        -:  621:			{
    37030:  622:				result = omatch(lin, &i, pat, j);
    37030:  623:				fprintf(file_name,"P115,");
    37030:  624:				if (!result)
        -:  625:				{
    17779:  626:					fprintf(file_name,"P117,");
    17779:  627:					done = true;
        -:  628:				}		
        -:  629:			}
    18007:  630:			done = false;
    18007:  631:			fprintf(file_name,"P118,");
    42461:  632:			while ((!done) && (i >= offset)) 
        -:  633:			{
    24454:  634:				k = amatch(lin, i, pat, j + patsize(pat, j));
    24454:  635:				fprintf(file_name,"P119,");
    24454:  636:				if ((k >= 0))
        -:  637:				{
    11115:  638:					fprintf(file_name,"P120,");
    11115:  639:					done = true;
        -:  640:				}
        -:  641:				else
        -:  642:				{
    13339:  643:					fprintf(file_name,"P121,");
    13339:  644:					i = i - 1;
        -:  645:				}	
        -:  646:			}
    18007:  647:			fprintf(file_name,"P122,");
    18007:  648:			offset = k;
    18007:  649:			done = true;
        -:  650:		} 
        -:  651:		else 
        -:  652:		{
   166966:  653:			result = omatch(lin, &offset, pat, j);
   166966:  654:			fprintf(file_name,"P123,");
   166966:  655:			if ((!result)) 
        -:  656:			{
   110044:  657:				fprintf(file_name,"P124,");
   110044:  658:				offset = -1;
   110044:  659:				done = true;
        -:  660:			}
        -:  661:			else
        -:  662:			{
    56922:  663:				fprintf(file_name,"P125,");
    56922:  664:				j = j + patsize(pat, j);
        -:  665:			}
        -:  666:		}
        -:  667:	}
   158542:  668:	fprintf(file_name,"P126,");
   158542:  669:	return offset;
        -:  670:}
        -:  671:
        -:  672:void
    29789:  673:putsub(lin, s1, s2, sub)
        -:  674:char* lin;
        -:  675:int	s1, s2;
        -:  676:char* sub;
        -:  677:{
        -:  678:    int	i;
        -:  679:    int	j;
    29789:  680:    i = 0;
    29789:  681:	fprintf(file_name,"P127,");
   389882:  682:    while ((sub[i] != ENDSTR)) 
        -:  683:	{
   360093:  684:		fprintf(file_name,"P128,");
   360093:  685:		if ((sub[i] == DITTO))
        -:  686:		{
    25813:  687:			fprintf(file_name,"P129,");
    59194:  688:			for (j = s1; j < s2; j++) 
        -:  689:		    {
    33381:  690:				fprintf(file_name,"P130,");
    33381:  691:				fputc(lin[j],stdout);
        -:  692:		    }
        -:  693:		}
        -:  694:		else	
        -:  695:		{
   334280:  696:			fprintf(file_name,"P131,");
   334280:  697:		    fputc(sub[i],stdout);
        -:  698:		}
   360093:  699:		fprintf(file_name,"P132,");
   360093:  700:		i = i + 1;
        -:  701:    }
    29789:  702:}
        -:  703:
        -:  704:void
    10141:  705:subline(lin, pat, sub)
        -:  706:char *lin;
        -:  707:char *pat;
        -:  708:char *sub;
        -:  709:{	
        -:  710:	int	i, lastm, m;
    10141:  711:	lastm = -1;
    10141:  712:	i = 0;
    10141:  713:	fprintf(file_name,"P133,");
   144229:  714:	while ((lin[i] != ENDSTR)) 
        -:  715:	{
   134088:  716:	    m = amatch(lin, i, pat, 0);
   134088:  717:	    fprintf(file_name,"P134,");
   134088:  718:		if ((m >= 0) && (lastm != m)) 
        -:  719:		{
    29789:  720:			fprintf(file_name,"P135,");
    29789:  721:			putsub(lin, i, m, sub);
    29789:  722:			lastm = m;
        -:  723:	    }
   134088:  724:		fprintf(file_name,"P136,");
   134088:  725:	    if ((m == -1) || (m == i))
        -:  726:		{
   111351:  727:			fprintf(file_name,"P137,");
   111351:  728:			fputc(lin[i],stdout);
   111351:  729:			i = i + 1;
        -:  730:	    } 
        -:  731:		else
        -:  732:		{
    22737:  733:			fprintf(file_name,"P138,");
    22737:  734:			i = m;
        -:  735:		}
        -:  736:	}
    10141:  737:}
        -:  738:
        -:  739:void
     4658:  740:change(pat, sub)
        -:  741:char *pat, *sub;
        -:  742:{
        -:  743:    string  line;
        -:  744:    bool result;
     4658:  745:    result = get_line(line, MAXSTR);
        -:  746:	
     4658:  747:    fprintf(file_name,"P139,");
    14799:  748:	while ((result)) 
        -:  749:	{
    10141:  750:		fprintf(file_name,"P140,");
    10141:  751:		subline(line, pat, sub);
    10141:  752:		result = get_line(line, MAXSTR);
        -:  753:    }
     4658:  754:}
        -:  755:
     5542:  756:main(argc, argv)
        -:  757:int	argc;
        -:  758:char	*argv[];
        -:  759:{
     5542:  760:	file_name=fopen("v32.txt","a+"); 
     5542:  761:    if(!file_name)
        -:  762:    {	
    #####:  763:        printf("File could not be opened! \n");
    #####:  764:        fclose(file_name);
    #####:  765:        exit(0);
        -:  766:    }
        -:  767:	string pat, sub;
        -:  768:	bool result;
        -:  769:
     5542:  770:	fprintf(file_name,"\nP1,");
     5542:  771:	if (argc < 2) 
        -:  772:	{
       22:  773:		fprintf(file_name,"P2,");
       22:  774:		(void)fprintf(stdout, "usage: change from [to]\n");
       22:  775:		exit(1);
        -:  776:	};
        -:  777:	
     5520:  778:	result = getpat(argv[1], pat);
     5520:  779:	fprintf(file_name,"P3,");
     5520:  780:	if (!result)
        -:  781:	{
      570:  782:		fprintf(file_name,"P4,");
      570:  783:		(void)fprintf(stdout, "change: illegal \"from\" pattern\n");
      570:  784:		exit(2);
        -:  785:	}
        -:  786:
     4950:  787:	fprintf(file_name,"P5,");
     4950:  788:	if (argc >= 3)
        -:  789:	{
     4838:  790:		result = getsub(argv[2], sub);
     4838:  791:		fprintf(file_name,"P6,");
     4838:  792:		if (!result)
        -:  793:		{	
      292:  794:			fprintf(file_name,"P7,");
      292:  795:			(void)fprintf(stdout, "change: illegal \"to\" string\n");
      292:  796:			exit(3);
        -:  797:		}
        -:  798:	} 
        -:  799:	else
        -:  800:	{
      112:  801:		fprintf(file_name,"P8,");
      112:  802:		sub[0] = '\0';
        -:  803:	}
        -:  804:
     4658:  805:	fprintf(file_name,"P9,");
     4658:  806:	change(pat, sub);
     4658:  807:	return 0;
        -:  808:}
        -:  809:
        -:  810:void
    #####:  811:Caseerror(n)
        -:  812:int	n;
        -:  813:{
    #####:  814:	fprintf(file_name,"P10,");
    #####:  815:	(void)fprintf(stdout, "Missing case limb: line %d\n", n);
    #####:  816:	exit(4);
        -:  817:}
