        -:    0:Source:replace_instrumented.c
        -:    0:Graph:replace_instrumented.gcno
        -:    0:Data:replace_instrumented.gcda
        -:    0:Runs:5542
        -:    1:/*  -*- Last-Edit:  Mon Dec  7 10:31:51 1992 by Tarak S. Goradia; -*- */
        -:    2:
        -:    3:extern void	exit();
        -:    4:# include <stdio.h>
        -:    5:#include <signal.h>
        -:    6:
        -:    7:void	Caseerror();
        -:    8:
        -:    9:typedef char	bool;
        -:   10:# define false 0
        -:   11:# define true  1
        -:   12:# define NULL 0
        -:   13:
        -:   14:# define MAXSTR 100
        -:   15:# define MAXPAT MAXSTR
        -:   16:
        -:   17:# define ENDSTR  '\0'
        -:   18:# define ESCAPE  '@'
        -:   19:# define CLOSURE '*'
        -:   20:# define BOL     '%'
        -:   21:# define EOL     '$'
        -:   22:# define ANY     '?'
        -:   23:# define CCL     '['
        -:   24:# define CCLEND  ']'
        -:   25:# define NEGATE  '^'
        -:   26:# define NCCL    '!'
        -:   27:# define LITCHAR 'c'
        -:   28:# define DITTO   -1
        -:   29:# define DASH    '-'
        -:   30:
        -:   31:# define TAB     9
        -:   32:# define NEWLINE 10
        -:   33:
        -:   34:# define CLOSIZE 1
        -:   35:FILE* file_name = NULL;
        -:   36:
        -:   37:// Signal handler for SIGSEGV 
        -:   38:// add by mshadow
    #####:   39:void segfault_handler(int sig) {
    #####:   40:    exit(sig);  // Exit the program
        -:   41:}
        -:   42:
        -:   43:
        -:   44:typedef char	character;
        -:   45:typedef char string[MAXSTR];
        -:   46:
        -:   47:bool
    14799:   48:get_line(s, maxsize)
        -:   49:char *s;
        -:   50:int	maxsize;
        -:   51:{
    14799:   52:	fprintf(file_name,"P11,");
        -:   53:    char *result;
    14799:   54:    result = fgets(s, maxsize, stdin);
    14799:   55:    return (result != NULL);
        -:   56:}
        -:   57:
        -:   58:int
   182913:   59:addstr(c, outset, j, maxset)
        -:   60:char c;
        -:   61:char *outset;
        -:   62:int	*j;
        -:   63:int	maxset;
        -:   64:{
        -:   65:    bool result;
   182913:   66:	fprintf(file_name,"P12,");
   182913:   67:    if (*j >= maxset)
        -:   68:	{
    45218:   69:		fprintf(file_name,"P13,");
    45218:   70:		result = false;
        -:   71:	}
        -:   72:    else 
        -:   73:	{
   137695:   74:		fprintf(file_name,"P14,");
   137695:   75:		outset[*j] = c;
   137695:   76:		*j = *j + 1;
   137695:   77:		result = true;
        -:   78:    }
   182913:   79:	fprintf(file_name,"P15,");
   182913:   80:    return result;
        -:   81:}
        -:   82:
        -:   83:char
    75119:   84:esc(s, i)
        -:   85:char *s;
        -:   86:int	*i;
        -:   87:{
        -:   88:    char result;
    75119:   89:	fprintf(file_name,"P16,");
    75119:   90:    if (s[*i] != ESCAPE)
        -:   91:	{
    69922:   92:		fprintf(file_name,"P17,");
    69922:   93:		result = s[*i];
        -:   94:	}
     5197:   95:    else if (s[*i + 1] == ENDSTR)
        -:   96:	{
       53:   97:		fprintf(file_name,"P18,");
       53:   98:		result = ESCAPE;
        -:   99:	}
        -:  100:	else 
        -:  101:	{
     5144:  102:	    *i = *i + 1;
     5144:  103:	    fprintf(file_name,"P19,");
     5144:  104:		if (s[*i] == 'n')
        -:  105:		{
     1001:  106:			fprintf(file_name,"P20,");
     1001:  107:			result = NEWLINE;
        -:  108:		}
     4143:  109:	    else if (s[*i] == 't')
        -:  110:		{
      879:  111:			fprintf(file_name,"P21,");
      879:  112:			result = TAB;
        -:  113:		}
        -:  114:		else
        -:  115:		{
     3264:  116:			fprintf(file_name,"P22,");
     3264:  117:			result = s[*i];
        -:  118:		}  
        -:  119:	}
    75119:  120:	fprintf(file_name,"P23,");
    75119:  121:    return result;
        -:  122:}
        -:  123:
        -:  124:void change();
        -:  125:
        -:  126:void
     6360:  127:dodash(delim, src, i, dest, j, maxset)
        -:  128:char delim;
        -:  129:char *src;
        -:  130:int	*i;
        -:  131:char *dest;
        -:  132:int	*j;
        -:  133:int	maxset;
        -:  134:{
        -:  135:    int	k;
        -:  136:    bool junk;
        -:  137:    char escjunk;
     6360:  138:	fprintf(file_name,"P24,");
    24340:  139:    while ((src[*i] != delim) && (src[*i] != ENDSTR)) 
        -:  140:    {
    17980:  141:		fprintf(file_name,"P25,");
    17980:  142:		if (src[*i - 1] == ESCAPE) 
        -:  143:		{
      566:  144:			fprintf(file_name,"P26,");
      566:  145:			escjunk = esc(src, i);
      566:  146:			junk = addstr(escjunk, dest, j, maxset);
        -:  147:		} 
    17414:  148:		else if (src[*i] != DASH)
        -:  149:		{
    10753:  150:			fprintf(file_name,"P27,");
    10753:  151:			junk = addstr(src[*i], dest, j, maxset);
        -:  152:		}
     6661:  153:		else if (*j <= 1 || src[*i + 1] == ENDSTR)
        -:  154:		{
       96:  155:			fprintf(file_name,"P28,");
       96:  156:			junk = addstr(DASH, dest, j, maxset);
        -:  157:		}
     6565:  158:	    else if ((isalnum(src[*i - 1])) & (isalnum(src[*i + 1]))
        -:  159:                    /*  Replaced logical AND with bitwise AND  */
     4939:  160:		&& (src[*i - 1] <= src[*i + 1]))
        -:  161:		{
     4825:  162:			fprintf(file_name,"P29,");
    39699:  163:			for (k = src[*i-1]+1; k<=src[*i+1]; k++) 
        -:  164:			{
    34874:  165:				fprintf(file_name,"P30,");
    34874:  166:				junk = addstr(k, dest, j, maxset);
        -:  167:			}
     4825:  168:			fprintf(file_name,"P31,");	
     4825:  169:			*i = *i + 1;	
        -:  170:		} 
        -:  171:		else
        -:  172:		{
     1740:  173:			fprintf(file_name,"P32,");
     1740:  174:			junk = addstr(DASH, dest, j, maxset);
        -:  175:		}	
    17980:  176:		fprintf(file_name,"P33,");
    17980:  177:		(*i) = (*i) + 1;
        -:  178:    }
     6360:  179:}
        -:  180:
        -:  181:bool
     6360:  182:getccl(arg, i, pat, j)
        -:  183:char *arg;
        -:  184:int	*i;
        -:  185:char *pat;
        -:  186:int	*j;
        -:  187:{
        -:  188:    int	jstart;
        -:  189:    bool junk;
     6360:  190:    *i = *i + 1;
     6360:  191:	fprintf(file_name,"P34,");
     6360:  192:    if (arg[*i] == NEGATE) 
        -:  193:	{
     3053:  194:		fprintf(file_name,"P35,");
     3053:  195:		junk = addstr(NCCL, pat, j, MAXPAT);
     3053:  196:		*i = *i + 1;
        -:  197:    } 
        -:  198:	else
        -:  199:	{
     3307:  200:		fprintf(file_name,"P36,");
     3307:  201:		junk = addstr(CCL, pat, j, MAXPAT);
        -:  202:	}
     6360:  203:	fprintf(file_name,"P37,");
     6360:  204:    jstart = *j;
     6360:  205:    junk = addstr(0, pat, j, MAXPAT);
     6360:  206:    dodash(CCLEND, arg, i, pat, j, MAXPAT);
     6360:  207:    pat[jstart] = *j - jstart - 1;
     6360:  208:    return (arg[*i] == CCLEND);
        -:  209:}
        -:  210:
        -:  211:void
     1968:  212:stclose(pat, j, lastj)
        -:  213:char *pat;
        -:  214:int	*j;
        -:  215:int	lastj;
        -:  216:{
        -:  217:    int	jt;
        -:  218:    int	jp;
        -:  219:    bool junk;
     1968:  220:	fprintf(file_name,"P38,");
     7078:  221:    for (jp = *j - 1; jp >= lastj ; jp--) 
        -:  222:    {
     5110:  223:		fprintf(file_name,"P39,");
     5110:  224:		jt = jp + CLOSIZE;
     5110:  225:		junk = addstr(pat[jp], pat, &jt, MAXPAT);
        -:  226:    }
     1968:  227:	fprintf(file_name,"P40,");
     1968:  228:    *j = *j + CLOSIZE;
     1968:  229:    pat[lastj] = CLOSURE;
     1968:  230:}
        -:  231:
     2048:  232:bool in_set_2(c)
        -:  233:char c;
        -:  234:{
     2048:  235:	fprintf(file_name,"P41,");
     2048:  236:  	return (c == BOL || c == EOL || c == CLOSURE);
        -:  237:}      
        -:  238:
   303013:  239:bool in_pat_set(c)
        -:  240:char c;
        -:  241:{
   303013:  242:	fprintf(file_name,"P42,");
  303013*:  243:  	return (c == LITCHAR || c == BOL || c == EOL || c == ANY || c == CCL || c == NCCL || c == CLOSURE);
        -:  244:}      
        -:  245:
        -:  246:int
     5520:  247:makepat(arg, start, delim, pat)
        -:  248:char	*arg;
        -:  249:int	start;
        -:  250:char	delim;
        -:  251:char	*pat;
        -:  252:{
        -:  253:    int	result;
        -:  254:    int	i, j, lastj, lj;
        -:  255:    bool done, junk;
        -:  256:    bool getres;
        -:  257:    char escjunk;
        -:  258:
     5520:  259:    j = 0;
     5520:  260:    i = start;
     5520:  261:    lastj = 0;
     5520:  262:    done = false;
     5520:  263:	fprintf(file_name,"P43,");
    44034:  264:    while ((!done) && (arg[i] != delim) && (arg[i] != ENDSTR)) 
        -:  265:	{
    38514:  266:		lj = j;
    38514:  267:		fprintf(file_name,"P44,");
    38514:  268:		if ((arg[i] == ANY))
        -:  269:		{
     3447:  270:			fprintf(file_name,"P45,");
     3447:  271:			junk = addstr(ANY, pat, &j, MAXPAT);
        -:  272:		}
    35067:  273:		else if ((arg[i] == BOL) && (i == start))
        -:  274:		{
      387:  275:			fprintf(file_name,"P46,");
      387:  276:			junk = addstr(BOL, pat, &j, MAXPAT);
        -:  277:		}
    34680:  278:		else if ((arg[i] == EOL) && (arg[i+1] == delim))
        -:  279:		{
      410:  280:			fprintf(file_name,"P47,");
      410:  281:			junk = addstr(EOL, pat, &j, MAXPAT);
        -:  282:		}
    34270:  283:		else if ((arg[i] == CCL)) 
        -:  284:		{
     6360:  285:			fprintf(file_name,"P48,");
     6360:  286:			getres = getccl(arg, &i, pat, &j);
     6360:  287:			done = (bool)(getres == false);
        -:  288:		} 
    27910:  289:		else if ((arg[i] == CLOSURE) && (i > start)) 
        -:  290:		{
     2048:  291:			fprintf(file_name,"P49,");
     2048:  292:			lj = lastj;
     2048:  293:			if (in_set_2(pat[lj]))
        -:  294:			{
       80:  295:				fprintf(file_name,"P50,");
       80:  296:				done = true;
        -:  297:			}	
        -:  298:			else
        -:  299:			{
     1968:  300:				fprintf(file_name,"P51,");
     1968:  301:				stclose(pat, &j, lastj);
        -:  302:			}
        -:  303:		} 
        -:  304:		else 
        -:  305:		{
    25862:  306:			fprintf(file_name,"P52,");
    25862:  307:			junk = addstr(LITCHAR, pat, &j, MAXPAT);
    25862:  308:			escjunk = esc(arg, &i);
    25862:  309:			junk = addstr(escjunk, pat, &j, MAXPAT);
        -:  310:		}
        -:  311:		
    38514:  312:		lastj = lj;
    38514:  313:		fprintf(file_name,"P53,");
    38514:  314:		if ((!done))
        -:  315:		{
    38110:  316:			fprintf(file_name,"P54,");
    38110:  317:			i = i + 1;
        -:  318:		}
        -:  319:    }	
     5520:  320:    junk = addstr(ENDSTR, pat, &j, MAXPAT);
     5520:  321:    fprintf(file_name,"P55,");
     5520:  322:	if ((done) || (arg[i] != delim))
        -:  323:	{
      404:  324:		fprintf(file_name,"P56,");
      404:  325:		result = 0;
        -:  326:	}
     5116:  327:    else if ((!junk))
        -:  328:	{
      106:  329:		fprintf(file_name,"P57,");
      106:  330:		result = 0;
        -:  331:	}
        -:  332:	else
        -:  333:	{
     5010:  334:		fprintf(file_name,"P58,");
     5010:  335:		result = i;
        -:  336:	}
     5520:  337:	fprintf(file_name,"P59,");
     5520:  338:    return result;
        -:  339:}
        -:  340:
        -:  341:int
     5520:  342:getpat(arg, pat)
        -:  343:char* arg;
        -:  344:char* pat;
        -:  345:{
     5520:  346:	fprintf(file_name,"P60,");
        -:  347:    int	makeres;
     5520:  348:    makeres = makepat(arg, 0, ENDSTR, pat);
     5520:  349:    return (makeres > 0);
        -:  350:}
        -:  351:
        -:  352:int
     4838:  353:makesub(arg, from, delim, sub)
        -:  354:char* arg;
        -:  355:int	from;
        -:  356:character delim;
        -:  357:char*	sub;
        -:  358:{
        -:  359:    int  result;
        -:  360:    int	i, j;
        -:  361:    bool	junk;
        -:  362:    character	escjunk;
        -:  363:
     4838:  364:    j = 0;
     4838:  365:    i = from;
        -:  366:
     4838:  367:	fprintf(file_name,"P61,");
    55566:  368:    while ((arg[i] != delim) && (arg[i] != ENDSTR)) 
        -:  369:	{
    50728:  370:		fprintf(file_name,"P62,");
    50728:  371:		if ((arg[i] == (unsigned)('&')))
        -:  372:		{
     2037:  373:			fprintf(file_name,"P63,");
     2037:  374:			junk = addstr(DITTO, sub, &j, MAXPAT);
        -:  375:		}
        -:  376:		else 
        -:  377:		{
    48691:  378:			fprintf(file_name,"P64,");
    48691:  379:			escjunk = esc(arg, &i);
    48691:  380:			junk = addstr(escjunk, sub, &j, MAXPAT);
        -:  381:		}
    50728:  382:		fprintf(file_name,"P65,");
    50728:  383:		i = i + 1;
        -:  384:    }
     4838:  385:	fprintf(file_name,"P66,");
     4838:  386:    if (arg[i] != delim)
        -:  387:	{
    #####:  388:		fprintf(file_name,"P67,");
    #####:  389:		result = 0;
        -:  390:	}
        -:  391:    else 
        -:  392:	{
     4838:  393:		junk = addstr(ENDSTR, &(*sub), &j, MAXPAT);
     4838:  394:		fprintf(file_name,"P68,");
     4838:  395:		if ((!junk))
        -:  396:		{
       62:  397:			fprintf(file_name,"P69,");
       62:  398:			result = 0;
        -:  399:		}
        -:  400:		else
        -:  401:		{
     4776:  402:			fprintf(file_name,"P70,");
     4776:  403:			result = i;
        -:  404:		}	
        -:  405:    }
     4838:  406:	fprintf(file_name,"P71,");	
     4838:  407:    return result;
        -:  408:}
        -:  409:
        -:  410:bool
     4838:  411:getsub(arg, sub)
        -:  412:char* arg;
        -:  413:char* sub;
        -:  414:{
     4838:  415:	fprintf(file_name,"P72,");
        -:  416:    int	makeres;
     4838:  417:    makeres = makesub(arg, 0, ENDSTR, sub);
     4838:  418:    return (makeres > 0);
        -:  419:}
        -:  420:
        -:  421:void subline();
        -:  422:
        -:  423:bool
    50612:  424:locate(c, pat, offset)
        -:  425:character c;
        -:  426:char* pat;
        -:  427:int	offset;
        -:  428:{
        -:  429:    int	i;
        -:  430:    bool flag;
    50612:  431:    flag = false;
    50612:  432:    i = offset + pat[offset];
        -:  433:
    50612:  434:    fprintf(file_name,"P73,");
   382403:  435:	while ((i > offset))
        -:  436:    {
   331791:  437:		fprintf(file_name,"P74,");
   331791:  438:		if (c == pat[i]) 
        -:  439:		{
    15143:  440:			fprintf(file_name,"P75,");
    15143:  441:			flag = true;
    15143:  442:			i = offset;
        -:  443:		} 
        -:  444:		else
        -:  445:		{
   316648:  446:			fprintf(file_name,"P76,");
   316648:  447:			i = i - 1;
        -:  448:		}
        -:  449:    }
        -:  450:
    50612:  451:	fprintf(file_name,"P77,");
    50612:  452:    return flag;
        -:  453:}
        -:  454:
        -:  455:bool
   203996:  456:omatch(lin, i, pat, j)
        -:  457:char* lin;
        -:  458:int	*i;
        -:  459:char* pat;
        -:  460:int	j;
        -:  461:{
        -:  462:    char advance;
        -:  463:    bool result;
   203996:  464:    advance = -1;
        -:  465:
   203996:  466:	fprintf(file_name,"P78,");
   203996:  467:    if ((lin[*i] == ENDSTR))
        -:  468:	{
      366:  469:		fprintf(file_name,"P79,");
      366:  470:		result = false;
        -:  471:	}
        -:  472:    else 
        -:  473:    {
   203630:  474:		fprintf(file_name,"P80,");
   203630:  475:		if (!in_pat_set(pat[j]))
        -:  476:		{
    #####:  477:			fprintf(file_name,"P81,");
    #####:  478:			(void)fprintf(stdout, "in omatch: can't happen\n");
    #####:  479:			abort();	
        -:  480:		} 
        -:  481:		else
        -:  482:		{
   203630:  483:			fprintf(file_name,"P82,");
   203630:  484:			switch (pat[j]) 
        -:  485:			{			
   118409:  486:				case LITCHAR:
   118409:  487:					fprintf(file_name,"P83,");
   118409:  488:					if (lin[*i] == pat[j + 1])
        -:  489:					{
    25984:  490:						fprintf(file_name,"P84,");
    25984:  491:						advance = 1;
        -:  492:					}
   118409:  493:					fprintf(file_name,"P85,");
   118409:  494:					break ;	
     6345:  495:				case BOL:
     6345:  496:					fprintf(file_name,"P86,");
     6345:  497:					if (*i == 0)
        -:  498:					{
      695:  499:						fprintf(file_name,"P87,");
      695:  500:						advance = 0;
        -:  501:					}
     6345:  502:					fprintf(file_name,"P88,");
     6345:  503:					break ;
    22999:  504:				case ANY:
    22999:  505:				    fprintf(file_name,"P89,");
    22999:  506:					if (lin[*i] != NEWLINE)
        -:  507:					{
    21336:  508:						fprintf(file_name,"P90,");
    21336:  509:						advance = 1;
        -:  510:					}
    22999:  511:					fprintf(file_name,"P91,");
    22999:  512:					break ;
     4223:  513:				case EOL:
     4223:  514:				 	fprintf(file_name,"P92,");
     4223:  515:					if (lin[*i] == NEWLINE)
        -:  516:					{
      655:  517:						fprintf(file_name,"P93,");
      655:  518:						advance = 0;
        -:  519:					}
     4223:  520:					fprintf(file_name,"P94,");	
     4223:  521:					break ;
    34534:  522:				case CCL:
    34534:  523:					fprintf(file_name,"P95,");
    34534:  524:					if (locate(lin[*i], pat, j + 1))
        -:  525:					{
    13284:  526:						fprintf(file_name,"P96,");
    13284:  527:						advance = 1;
        -:  528:					}
    34534:  529:					fprintf(file_name,"P97,");
    34534:  530:					break ;
    17120:  531:				case NCCL:
    17120:  532:					fprintf(file_name,"P98,");
    17120:  533:					if ((lin[*i] != NEWLINE) && (!locate(lin[*i], pat, j+1)))
        -:  534:					{
    14219:  535:						fprintf(file_name,"P99,");
    14219:  536:						advance = 1;	
        -:  537:					}
    17120:  538:					fprintf(file_name,"P100,");
    17120:  539:					break;
    #####:  540:				default:
    #####:  541:					fprintf(file_name,"P101,");
    #####:  542:					Caseerror(pat[j]);
        -:  543:			};
        -:  544:		}	
        -:  545:    }
   203996:  546:    if ((advance >= 0)) 
        -:  547:    {
    76173:  548:		fprintf(file_name,"P102,");
    76173:  549:		*i = *i + advance;
    76173:  550:		result = true;
        -:  551:    } 
        -:  552:	else
        -:  553:	{
   127823:  554:		fprintf(file_name,"P103,");
   127823:  555:		result = false;
        -:  556:	}
   203996:  557:	fprintf(file_name,"P104,");
   203996:  558:    return result;
        -:  559:}
        -:  560:
        -:  561:
    99383:  562:patsize(pat, n)
        -:  563:char*	pat;
        -:  564:int	n;
        -:  565:{
        -:  566:    int size;
    99383:  567:	fprintf(file_name,"P105,");
    99383:  568:    if (!in_pat_set(pat[n])) 
        -:  569:	{
    #####:  570:		fprintf(file_name,"P106,");
    #####:  571:		(void)fprintf(stdout, "in patsize: can't happen\n");
    #####:  572:		abort();
        -:  573:    } 
        -:  574:	else
        -:  575:	{
    99383:  576:		fprintf(file_name,"P107,");
    99383:  577:		switch (pat[n]) 
        -:  578:		{
    33583:  579:		case LITCHAR: 
    33583:  580:			fprintf(file_name,"P108,");
    33583:  581:			size = 2; 
    33583:  582:			break;
        -:  583:			
    21187:  584:		case BOL:  
        -:  585:		case EOL:  
        -:  586:		case ANY:
    21187:  587:			fprintf(file_name,"P109,");
    21187:  588:			size = 1;
    21187:  589:			break;
    26606:  590:		case CCL:  
        -:  591:		case NCCL:
    26606:  592:			fprintf(file_name,"P110,");
    26606:  593:			size = pat[n + 1] + 2;
    26606:  594:			break ;
    18007:  595:		case CLOSURE:
    18007:  596:			fprintf(file_name,"P111,");
    18007:  597:			size = CLOSIZE;
    18007:  598:			break ;
    #####:  599:		default:
    #####:  600:			fprintf(file_name,"P112,");
    #####:  601:			Caseerror(pat[n]);
        -:  602:		}
        -:  603:	}
        -:  604:
    99383:  605:    return size;
        -:  606:}
        -:  607:
        -:  608:int
   158542:  609:amatch(lin, offset, pat, j)
        -:  610:char*	lin;
        -:  611:int	offset;
        -:  612:char*	pat;
        -:  613:int	j;
        -:  614:{
        -:  615:    int	i, k;
        -:  616:    bool result, done;
   158542:  617:    done = false;
        -:  618:
   158542:  619:	fprintf(file_name,"P113,");
   343515:  620:    while ((!done) && (pat[j] != ENDSTR))
        -:  621:	{
   184973:  622:		fprintf(file_name,"P114,");
   184973:  623:		if ((pat[j] == CLOSURE)) 
        -:  624:		{
    18007:  625:			j = j + patsize(pat, j);
    18007:  626:			i = offset;
    18007:  627:			fprintf(file_name,"P115,");
    55037:  628:			while ((!done) && (lin[i] != ENDSTR)) 
        -:  629:			{
    37030:  630:				result = omatch(lin, &i, pat, j);
    37030:  631:				fprintf(file_name,"P115,");
    37030:  632:				if (!result)
        -:  633:				{
    17779:  634:					fprintf(file_name,"P117,");
    17779:  635:					done = true;
        -:  636:				}		
        -:  637:			}
    18007:  638:			done = false;
    18007:  639:			fprintf(file_name,"P118,");
    42461:  640:			while ((!done) && (i >= offset)) 
        -:  641:			{
    24454:  642:				k = amatch(lin, i, pat, j + patsize(pat, j));
    24454:  643:				fprintf(file_name,"P119,");
    24454:  644:				if ((k >= 0))
        -:  645:				{
    11115:  646:					fprintf(file_name,"P120,");
    11115:  647:					done = true;
        -:  648:				}
        -:  649:				else
        -:  650:				{
    13339:  651:					fprintf(file_name,"P121,");
    13339:  652:					i = i - 1;
        -:  653:				}	
        -:  654:			}
    18007:  655:			fprintf(file_name,"P122,");
    18007:  656:			offset = k;
    18007:  657:			done = true;
        -:  658:		} 
        -:  659:		else 
        -:  660:		{
   166966:  661:			result = omatch(lin, &offset, pat, j);
   166966:  662:			fprintf(file_name,"P123,");
   166966:  663:			if ((!result)) 
        -:  664:			{
   110044:  665:				fprintf(file_name,"P124,");
   110044:  666:				offset = -1;
   110044:  667:				done = true;
        -:  668:			}
        -:  669:			else
        -:  670:			{
    56922:  671:				fprintf(file_name,"P125,");
    56922:  672:				j = j + patsize(pat, j);
        -:  673:			}
        -:  674:		}
        -:  675:	}
   158542:  676:	fprintf(file_name,"P126,");
   158542:  677:	return offset;
        -:  678:}
        -:  679:
        -:  680:void
    29789:  681:putsub(lin, s1, s2, sub)
        -:  682:char* lin;
        -:  683:int	s1, s2;
        -:  684:char* sub;
        -:  685:{
        -:  686:    int	i;
        -:  687:    int	j;
    29789:  688:    i = 0;
    29789:  689:	fprintf(file_name,"P127,");
   389882:  690:    while ((sub[i] != ENDSTR)) 
        -:  691:	{
   360093:  692:		fprintf(file_name,"P128,");
   360093:  693:		if ((sub[i] == DITTO))
        -:  694:		{
    25813:  695:			fprintf(file_name,"P129,");
    59194:  696:			for (j = s1; j < s2; j++) 
        -:  697:		    {
    33381:  698:				fprintf(file_name,"P130,");
    33381:  699:				fputc(lin[j],stdout);
        -:  700:		    }
        -:  701:		}
        -:  702:		else	
        -:  703:		{
   334280:  704:			fprintf(file_name,"P131,");
   334280:  705:		    fputc(sub[i],stdout);
        -:  706:		}
   360093:  707:		fprintf(file_name,"P132,");
   360093:  708:		i = i + 1;
        -:  709:    }
    29789:  710:}
        -:  711:
        -:  712:void
    10141:  713:subline(lin, pat, sub)
        -:  714:char *lin;
        -:  715:char *pat;
        -:  716:char *sub;
        -:  717:{	
        -:  718:	int	i, lastm, m;
    10141:  719:	lastm = -1;
    10141:  720:	i = 0;
    10141:  721:	fprintf(file_name,"P133,");
   144229:  722:	while ((lin[i] != ENDSTR)) 
        -:  723:	{
   134088:  724:	    m = amatch(lin, i, pat, 0);
   134088:  725:	    fprintf(file_name,"P134,");
   134088:  726:		if ((m >= 0) && (lastm != m)) 
        -:  727:		{
    29789:  728:			fprintf(file_name,"P135,");
    29789:  729:			putsub(lin, i, m, sub);
    29789:  730:			lastm = m;
        -:  731:	    }
   134088:  732:		fprintf(file_name,"P136,");
   134088:  733:	    if ((m == -1) || (m == i))
        -:  734:		{
   111351:  735:			fprintf(file_name,"P137,");
   111351:  736:			fputc(lin[i],stdout);
   111351:  737:			i = i + 1;
        -:  738:	    } 
        -:  739:		else
        -:  740:		{
    22737:  741:			fprintf(file_name,"P138,");
    22737:  742:			i = m;
        -:  743:		}
        -:  744:	}
    10141:  745:}
        -:  746:
        -:  747:void
     4658:  748:change(pat, sub)
        -:  749:char *pat, *sub;
        -:  750:{
        -:  751:    string  line;
        -:  752:    bool result;
     4658:  753:    result = get_line(line, MAXSTR);
        -:  754:	
     4658:  755:    fprintf(file_name,"P139,");
    14799:  756:	while ((result)) 
        -:  757:	{
    10141:  758:		fprintf(file_name,"P140,");
    10141:  759:		subline(line, pat, sub);
    10141:  760:		result = get_line(line, MAXSTR);
        -:  761:    }
     4658:  762:}
        -:  763:
     5542:  764:main(argc, argv)
        -:  765:int	argc;
        -:  766:char	*argv[];
        -:  767:{
     5542:  768:	signal(SIGSEGV, segfault_handler);
     5542:  769:	file_name=fopen("v32.txt","a+"); 
     5542:  770:    if(!file_name)
        -:  771:    {	
    #####:  772:        printf("File could not be opened! \n");
    #####:  773:        fclose(file_name);
    #####:  774:        exit(0);
        -:  775:    }
        -:  776:	string pat, sub;
        -:  777:	bool result;
        -:  778:
     5542:  779:	fprintf(file_name,"\nP1,");
     5542:  780:	if (argc < 2) 
        -:  781:	{
       22:  782:		fprintf(file_name,"P2,");
       22:  783:		(void)fprintf(stdout, "usage: change from [to]\n");
       22:  784:		exit(1);
        -:  785:	};
        -:  786:	
     5520:  787:	result = getpat(argv[1], pat);
     5520:  788:	fprintf(file_name,"P3,");
     5520:  789:	if (!result)
        -:  790:	{
      570:  791:		fprintf(file_name,"P4,");
      570:  792:		(void)fprintf(stdout, "change: illegal \"from\" pattern\n");
      570:  793:		exit(2);
        -:  794:	}
        -:  795:
     4950:  796:	fprintf(file_name,"P5,");
     4950:  797:	if (argc >= 3)
        -:  798:	{
     4838:  799:		result = getsub(argv[2], sub);
     4838:  800:		fprintf(file_name,"P6,");
     4838:  801:		if (!result)
        -:  802:		{	
      292:  803:			fprintf(file_name,"P7,");
      292:  804:			(void)fprintf(stdout, "change: illegal \"to\" string\n");
      292:  805:			exit(3);
        -:  806:		}
        -:  807:	} 
        -:  808:	else
        -:  809:	{
      112:  810:		fprintf(file_name,"P8,");
      112:  811:		sub[0] = '\0';
        -:  812:	}
        -:  813:
     4658:  814:	fprintf(file_name,"P9,");
     4658:  815:	change(pat, sub);
     4658:  816:	return 0;
        -:  817:}
        -:  818:
        -:  819:void
    #####:  820:Caseerror(n)
        -:  821:int	n;
        -:  822:{
    #####:  823:	fprintf(file_name,"P10,");
    #####:  824:	(void)fprintf(stdout, "Missing case limb: line %d\n", n);
    #####:  825:	exit(4);
        -:  826:}
